// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: snakes.proto

package proto

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Роль узла в топологии связей узлов в пределах игры
type NodeRole int32

const (
	NodeRole_NORMAL NodeRole = 0
	NodeRole_MASTER NodeRole = 1
	NodeRole_DEPUTY NodeRole = 2
	NodeRole_VIEWER NodeRole = 3
)

var NodeRole_name = map[int32]string{
	0: "NORMAL",
	1: "MASTER",
	2: "DEPUTY",
	3: "VIEWER",
}

var NodeRole_value = map[string]int32{
	"NORMAL": 0,
	"MASTER": 1,
	"DEPUTY": 2,
	"VIEWER": 3,
}

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return proto.EnumName(NodeRole_name, int32(x))
}

func (x *NodeRole) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeRole_value, data, "NodeRole")
	if err != nil {
		return err
	}
	*x = NodeRole(value)
	return nil
}

func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{0}
}

// Тип игрока
type PlayerType int32

const (
	PlayerType_HUMAN PlayerType = 0
	PlayerType_ROBOT PlayerType = 1
)

var PlayerType_name = map[int32]string{
	0: "HUMAN",
	1: "ROBOT",
}

var PlayerType_value = map[string]int32{
	"HUMAN": 0,
	"ROBOT": 1,
}

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return proto.EnumName(PlayerType_name, int32(x))
}

func (x *PlayerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlayerType_value, data, "PlayerType")
	if err != nil {
		return err
	}
	*x = PlayerType(value)
	return nil
}

func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{1}
}

type Direction int32

const (
	Direction_UP    Direction = 1
	Direction_DOWN  Direction = 2
	Direction_LEFT  Direction = 3
	Direction_RIGHT Direction = 4
)

var Direction_name = map[int32]string{
	1: "UP",
	2: "DOWN",
	3: "LEFT",
	4: "RIGHT",
}

var Direction_value = map[string]int32{
	"UP":    1,
	"DOWN":  2,
	"LEFT":  3,
	"RIGHT": 4,
}

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (x *Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Direction_value, data, "Direction")
	if err != nil {
		return err
	}
	*x = Direction(value)
	return nil
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{2}
}

// Статус змеи в игре
type GameState_Snake_SnakeState int32

const (
	GameState_Snake_ALIVE  GameState_Snake_SnakeState = 0
	GameState_Snake_ZOMBIE GameState_Snake_SnakeState = 1
)

var GameState_Snake_SnakeState_name = map[int32]string{
	0: "ALIVE",
	1: "ZOMBIE",
}

var GameState_Snake_SnakeState_value = map[string]int32{
	"ALIVE":  0,
	"ZOMBIE": 1,
}

func (x GameState_Snake_SnakeState) Enum() *GameState_Snake_SnakeState {
	p := new(GameState_Snake_SnakeState)
	*p = x
	return p
}

func (x GameState_Snake_SnakeState) String() string {
	return proto.EnumName(GameState_Snake_SnakeState_name, int32(x))
}

func (x *GameState_Snake_SnakeState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameState_Snake_SnakeState_value, data, "GameState_Snake_SnakeState")
	if err != nil {
		return err
	}
	*x = GameState_Snake_SnakeState(value)
	return nil
}

func (GameState_Snake_SnakeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{3, 1, 0}
}

// Игрок
type GamePlayer struct {
	Name                 *string     `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Id                   *int32      `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	IpAddress            *string     `protobuf:"bytes,3,req,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	Port                 *int32      `protobuf:"varint,4,req,name=port" json:"port,omitempty"`
	Role                 *NodeRole   `protobuf:"varint,5,req,name=role,enum=snakes.NodeRole" json:"role,omitempty"`
	Type                 *PlayerType `protobuf:"varint,6,opt,name=type,enum=snakes.PlayerType,def=0" json:"type,omitempty"`
	Score                *int32      `protobuf:"varint,7,req,name=score" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GamePlayer) Reset()      { *m = GamePlayer{} }
func (*GamePlayer) ProtoMessage() {}
func (*GamePlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{0}
}
func (m *GamePlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayer.Merge(m, src)
}
func (m *GamePlayer) XXX_Size() int {
	return m.Size()
}
func (m *GamePlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayer.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayer proto.InternalMessageInfo

const Default_GamePlayer_Type PlayerType = PlayerType_HUMAN

func (m *GamePlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GamePlayer) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GamePlayer) GetIpAddress() string {
	if m != nil && m.IpAddress != nil {
		return *m.IpAddress
	}
	return ""
}

func (m *GamePlayer) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *GamePlayer) GetRole() NodeRole {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return NodeRole_NORMAL
}

func (m *GamePlayer) GetType() PlayerType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_GamePlayer_Type
}

func (m *GamePlayer) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// Параметры идущей игры (не должны меняться в процессе игры)
type GameConfig struct {
	Width                *int32   `protobuf:"varint,1,opt,name=width,def=40" json:"width,omitempty"`
	Height               *int32   `protobuf:"varint,2,opt,name=height,def=30" json:"height,omitempty"`
	FoodStatic           *int32   `protobuf:"varint,3,opt,name=food_static,json=foodStatic,def=1" json:"food_static,omitempty"`
	FoodPerPlayer        *float32 `protobuf:"fixed32,4,opt,name=food_per_player,json=foodPerPlayer,def=1" json:"food_per_player,omitempty"`
	StateDelayMs         *int32   `protobuf:"varint,5,opt,name=state_delay_ms,json=stateDelayMs,def=1000" json:"state_delay_ms,omitempty"`
	DeadFoodProb         *float32 `protobuf:"fixed32,6,opt,name=dead_food_prob,json=deadFoodProb,def=0.1" json:"dead_food_prob,omitempty"`
	PingDelayMs          *int32   `protobuf:"varint,7,opt,name=ping_delay_ms,json=pingDelayMs,def=100" json:"ping_delay_ms,omitempty"`
	NodeTimeoutMs        *int32   `protobuf:"varint,8,opt,name=node_timeout_ms,json=nodeTimeoutMs,def=800" json:"node_timeout_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameConfig) Reset()      { *m = GameConfig{} }
func (*GameConfig) ProtoMessage() {}
func (*GameConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{1}
}
func (m *GameConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConfig.Merge(m, src)
}
func (m *GameConfig) XXX_Size() int {
	return m.Size()
}
func (m *GameConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GameConfig proto.InternalMessageInfo

const Default_GameConfig_Width int32 = 40
const Default_GameConfig_Height int32 = 30
const Default_GameConfig_FoodStatic int32 = 1
const Default_GameConfig_FoodPerPlayer float32 = 1
const Default_GameConfig_StateDelayMs int32 = 1000
const Default_GameConfig_DeadFoodProb float32 = 0.1
const Default_GameConfig_PingDelayMs int32 = 100
const Default_GameConfig_NodeTimeoutMs int32 = 800

func (m *GameConfig) GetWidth() int32 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return Default_GameConfig_Width
}

func (m *GameConfig) GetHeight() int32 {
	if m != nil && m.Height != nil {
		return *m.Height
	}
	return Default_GameConfig_Height
}

func (m *GameConfig) GetFoodStatic() int32 {
	if m != nil && m.FoodStatic != nil {
		return *m.FoodStatic
	}
	return Default_GameConfig_FoodStatic
}

func (m *GameConfig) GetFoodPerPlayer() float32 {
	if m != nil && m.FoodPerPlayer != nil {
		return *m.FoodPerPlayer
	}
	return Default_GameConfig_FoodPerPlayer
}

func (m *GameConfig) GetStateDelayMs() int32 {
	if m != nil && m.StateDelayMs != nil {
		return *m.StateDelayMs
	}
	return Default_GameConfig_StateDelayMs
}

func (m *GameConfig) GetDeadFoodProb() float32 {
	if m != nil && m.DeadFoodProb != nil {
		return *m.DeadFoodProb
	}
	return Default_GameConfig_DeadFoodProb
}

func (m *GameConfig) GetPingDelayMs() int32 {
	if m != nil && m.PingDelayMs != nil {
		return *m.PingDelayMs
	}
	return Default_GameConfig_PingDelayMs
}

func (m *GameConfig) GetNodeTimeoutMs() int32 {
	if m != nil && m.NodeTimeoutMs != nil {
		return *m.NodeTimeoutMs
	}
	return Default_GameConfig_NodeTimeoutMs
}

// Игроки конкретной игры
type GamePlayers struct {
	Players              []*GamePlayer `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GamePlayers) Reset()      { *m = GamePlayers{} }
func (*GamePlayers) ProtoMessage() {}
func (*GamePlayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{2}
}
func (m *GamePlayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlayers.Merge(m, src)
}
func (m *GamePlayers) XXX_Size() int {
	return m.Size()
}
func (m *GamePlayers) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlayers.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlayers proto.InternalMessageInfo

func (m *GamePlayers) GetPlayers() []*GamePlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

// Текущее состояние игрового поля
type GameState struct {
	StateOrder           *int32             `protobuf:"varint,1,req,name=state_order,json=stateOrder" json:"state_order,omitempty"`
	Snakes               []*GameState_Snake `protobuf:"bytes,2,rep,name=snakes" json:"snakes,omitempty"`
	Foods                []*GameState_Coord `protobuf:"bytes,3,rep,name=foods" json:"foods,omitempty"`
	Players              *GamePlayers       `protobuf:"bytes,4,req,name=players" json:"players,omitempty"`
	Config               *GameConfig        `protobuf:"bytes,5,req,name=config" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GameState) Reset()      { *m = GameState{} }
func (*GameState) ProtoMessage() {}
func (*GameState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{3}
}
func (m *GameState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameState.Merge(m, src)
}
func (m *GameState) XXX_Size() int {
	return m.Size()
}
func (m *GameState) XXX_DiscardUnknown() {
	xxx_messageInfo_GameState.DiscardUnknown(m)
}

var xxx_messageInfo_GameState proto.InternalMessageInfo

func (m *GameState) GetStateOrder() int32 {
	if m != nil && m.StateOrder != nil {
		return *m.StateOrder
	}
	return 0
}

func (m *GameState) GetSnakes() []*GameState_Snake {
	if m != nil {
		return m.Snakes
	}
	return nil
}

func (m *GameState) GetFoods() []*GameState_Coord {
	if m != nil {
		return m.Foods
	}
	return nil
}

func (m *GameState) GetPlayers() *GamePlayers {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameState) GetConfig() *GameConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// Координаты в пределах игрового поля, либо относительное смещение координат.
// Левая верхняя клетка поля имеет координаты (x=0, y=0).
// Направление смещения задаётся знаком чисел.
type GameState_Coord struct {
	X                    *int32   `protobuf:"zigzag32,1,opt,name=x,def=0" json:"x,omitempty"`
	Y                    *int32   `protobuf:"zigzag32,2,opt,name=y,def=0" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameState_Coord) Reset()      { *m = GameState_Coord{} }
func (*GameState_Coord) ProtoMessage() {}
func (*GameState_Coord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{3, 0}
}
func (m *GameState_Coord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameState_Coord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameState_Coord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameState_Coord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameState_Coord.Merge(m, src)
}
func (m *GameState_Coord) XXX_Size() int {
	return m.Size()
}
func (m *GameState_Coord) XXX_DiscardUnknown() {
	xxx_messageInfo_GameState_Coord.DiscardUnknown(m)
}

var xxx_messageInfo_GameState_Coord proto.InternalMessageInfo

const Default_GameState_Coord_X int32 = 0
const Default_GameState_Coord_Y int32 = 0

func (m *GameState_Coord) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return Default_GameState_Coord_X
}

func (m *GameState_Coord) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return Default_GameState_Coord_Y
}

// Змея
type GameState_Snake struct {
	PlayerId *int32 `protobuf:"varint,1,req,name=player_id,json=playerId" json:"player_id,omitempty"`
	// Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
	// Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
	// в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки.
	Points               []*GameState_Coord          `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	State                *GameState_Snake_SnakeState `protobuf:"varint,3,req,name=utils,enum=snakes.GameState_Snake_SnakeState,def=0" json:"utils,omitempty"`
	HeadDirection        *Direction                  `protobuf:"varint,4,req,name=head_direction,json=headDirection,enum=snakes.Direction" json:"head_direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GameState_Snake) Reset()      { *m = GameState_Snake{} }
func (*GameState_Snake) ProtoMessage() {}
func (*GameState_Snake) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{3, 1}
}
func (m *GameState_Snake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameState_Snake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameState_Snake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameState_Snake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameState_Snake.Merge(m, src)
}
func (m *GameState_Snake) XXX_Size() int {
	return m.Size()
}
func (m *GameState_Snake) XXX_DiscardUnknown() {
	xxx_messageInfo_GameState_Snake.DiscardUnknown(m)
}

var xxx_messageInfo_GameState_Snake proto.InternalMessageInfo

const Default_GameState_Snake_State GameState_Snake_SnakeState = GameState_Snake_ALIVE

func (m *GameState_Snake) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *GameState_Snake) GetPoints() []*GameState_Coord {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *GameState_Snake) GetState() GameState_Snake_SnakeState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_GameState_Snake_State
}

func (m *GameState_Snake) GetHeadDirection() Direction {
	if m != nil && m.HeadDirection != nil {
		return *m.HeadDirection
	}
	return Direction_UP
}

// Общий формат любого сообщения
type GameMessage struct {
	MsgSeq     *int64 `protobuf:"varint,1,req,name=msg_seq,json=msgSeq" json:"msg_seq,omitempty"`
	SenderId   *int32 `protobuf:"varint,10,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ReceiverId *int32 `protobuf:"varint,11,opt,name=receiver_id,json=receiverId" json:"receiver_id,omitempty"`
	// Тип сообщения
	//
	// Types that are valid to be assigned to Type:
	//	*GameMessage_Ping
	//	*GameMessage_Steer
	//	*GameMessage_Ack
	//	*GameMessage_State
	//	*GameMessage_Announcement
	//	*GameMessage_Join
	//	*GameMessage_Error
	//	*GameMessage_RoleChange
	Type                 isGameMessage_Type `protobuf_oneof:"Type"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GameMessage) Reset()      { *m = GameMessage{} }
func (*GameMessage) ProtoMessage() {}
func (*GameMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4}
}
func (m *GameMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage.Merge(m, src)
}
func (m *GameMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage proto.InternalMessageInfo

type isGameMessage_Type interface {
	isGameMessage_Type()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type GameMessage_Ping struct {
	Ping *GameMessage_PingMsg `protobuf:"bytes,2,opt,name=ping,oneof" json:"ping,omitempty"`
}
type GameMessage_Steer struct {
	Steer *GameMessage_SteerMsg `protobuf:"bytes,3,opt,name=steer,oneof" json:"steer,omitempty"`
}
type GameMessage_Ack struct {
	Ack *GameMessage_AckMsg `protobuf:"bytes,4,opt,name=ack,oneof" json:"ack,omitempty"`
}
type GameMessage_State struct {
	State *GameMessage_StateMsg `protobuf:"bytes,5,opt,name=utils,oneof" json:"utils,omitempty"`
}
type GameMessage_Announcement struct {
	Announcement *GameMessage_AnnouncementMsg `protobuf:"bytes,6,opt,name=announcement,oneof" json:"announcement,omitempty"`
}
type GameMessage_Join struct {
	Join *GameMessage_JoinMsg `protobuf:"bytes,7,opt,name=join,oneof" json:"join,omitempty"`
}
type GameMessage_Error struct {
	Error *GameMessage_ErrorMsg `protobuf:"bytes,8,opt,name=error,oneof" json:"error,omitempty"`
}
type GameMessage_RoleChange struct {
	RoleChange *GameMessage_RoleChangeMsg `protobuf:"bytes,9,opt,name=role_change,json=roleChange,oneof" json:"role_change,omitempty"`
}

func (*GameMessage_Ping) isGameMessage_Type()         {}
func (*GameMessage_Steer) isGameMessage_Type()        {}
func (*GameMessage_Ack) isGameMessage_Type()          {}
func (*GameMessage_State) isGameMessage_Type()        {}
func (*GameMessage_Announcement) isGameMessage_Type() {}
func (*GameMessage_Join) isGameMessage_Type()         {}
func (*GameMessage_Error) isGameMessage_Type()        {}
func (*GameMessage_RoleChange) isGameMessage_Type()   {}

func (m *GameMessage) GetType() isGameMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *GameMessage) GetMsgSeq() int64 {
	if m != nil && m.MsgSeq != nil {
		return *m.MsgSeq
	}
	return 0
}

func (m *GameMessage) GetSenderId() int32 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *GameMessage) GetReceiverId() int32 {
	if m != nil && m.ReceiverId != nil {
		return *m.ReceiverId
	}
	return 0
}

func (m *GameMessage) GetPing() *GameMessage_PingMsg {
	if x, ok := m.GetType().(*GameMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *GameMessage) GetSteer() *GameMessage_SteerMsg {
	if x, ok := m.GetType().(*GameMessage_Steer); ok {
		return x.Steer
	}
	return nil
}

func (m *GameMessage) GetAck() *GameMessage_AckMsg {
	if x, ok := m.GetType().(*GameMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *GameMessage) GetState() *GameMessage_StateMsg {
	if x, ok := m.GetType().(*GameMessage_State); ok {
		return x.State
	}
	return nil
}

func (m *GameMessage) GetAnnouncement() *GameMessage_AnnouncementMsg {
	if x, ok := m.GetType().(*GameMessage_Announcement); ok {
		return x.Announcement
	}
	return nil
}

func (m *GameMessage) GetJoin() *GameMessage_JoinMsg {
	if x, ok := m.GetType().(*GameMessage_Join); ok {
		return x.Join
	}
	return nil
}

func (m *GameMessage) GetError() *GameMessage_ErrorMsg {
	if x, ok := m.GetType().(*GameMessage_Error); ok {
		return x.Error
	}
	return nil
}

func (m *GameMessage) GetRoleChange() *GameMessage_RoleChangeMsg {
	if x, ok := m.GetType().(*GameMessage_RoleChange); ok {
		return x.RoleChange
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GameMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GameMessage_Ping)(nil),
		(*GameMessage_Steer)(nil),
		(*GameMessage_Ack)(nil),
		(*GameMessage_State)(nil),
		(*GameMessage_Announcement)(nil),
		(*GameMessage_Join)(nil),
		(*GameMessage_Error)(nil),
		(*GameMessage_RoleChange)(nil),
	}
}

// Ничего не меняем, просто говорим что мы живы с интервалом ping_delay_ms
type GameMessage_PingMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameMessage_PingMsg) Reset()      { *m = GameMessage_PingMsg{} }
func (*GameMessage_PingMsg) ProtoMessage() {}
func (*GameMessage_PingMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 0}
}
func (m *GameMessage_PingMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_PingMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_PingMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_PingMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_PingMsg.Merge(m, src)
}
func (m *GameMessage_PingMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_PingMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_PingMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_PingMsg proto.InternalMessageInfo

// Не-центральный игрок просит повернуть голову змеи
type GameMessage_SteerMsg struct {
	Direction            *Direction `protobuf:"varint,1,req,name=direction,enum=snakes.Direction" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GameMessage_SteerMsg) Reset()      { *m = GameMessage_SteerMsg{} }
func (*GameMessage_SteerMsg) ProtoMessage() {}
func (*GameMessage_SteerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 1}
}
func (m *GameMessage_SteerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_SteerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_SteerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_SteerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_SteerMsg.Merge(m, src)
}
func (m *GameMessage_SteerMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_SteerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_SteerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_SteerMsg proto.InternalMessageInfo

func (m *GameMessage_SteerMsg) GetDirection() Direction {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return Direction_UP
}

// Подтверждение сообщения с таким же seq
type GameMessage_AckMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameMessage_AckMsg) Reset()      { *m = GameMessage_AckMsg{} }
func (*GameMessage_AckMsg) ProtoMessage() {}
func (*GameMessage_AckMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 2}
}
func (m *GameMessage_AckMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_AckMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_AckMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_AckMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_AckMsg.Merge(m, src)
}
func (m *GameMessage_AckMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_AckMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_AckMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_AckMsg proto.InternalMessageInfo

// Центральный узел сообщает отсальным игрокам состояние игры
type GameMessage_StateMsg struct {
	State                *GameState `protobuf:"bytes,1,req,name=utils" json:"utils,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GameMessage_StateMsg) Reset()      { *m = GameMessage_StateMsg{} }
func (*GameMessage_StateMsg) ProtoMessage() {}
func (*GameMessage_StateMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 3}
}
func (m *GameMessage_StateMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_StateMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_StateMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_StateMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_StateMsg.Merge(m, src)
}
func (m *GameMessage_StateMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_StateMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_StateMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_StateMsg proto.InternalMessageInfo

func (m *GameMessage_StateMsg) GetState() *GameState {
	if m != nil {
		return m.State
	}
	return nil
}

// Уведомление об идущей игре, регулярно отправляется multicast-ом
type GameMessage_AnnouncementMsg struct {
	Players              *GamePlayers `protobuf:"bytes,1,req,name=players" json:"players,omitempty"`
	Config               *GameConfig  `protobuf:"bytes,2,req,name=config" json:"config,omitempty"`
	CanJoin              *bool        `protobuf:"varint,3,opt,name=can_join,json=canJoin,def=1" json:"can_join,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GameMessage_AnnouncementMsg) Reset()      { *m = GameMessage_AnnouncementMsg{} }
func (*GameMessage_AnnouncementMsg) ProtoMessage() {}
func (*GameMessage_AnnouncementMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 4}
}
func (m *GameMessage_AnnouncementMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_AnnouncementMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_AnnouncementMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_AnnouncementMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_AnnouncementMsg.Merge(m, src)
}
func (m *GameMessage_AnnouncementMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_AnnouncementMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_AnnouncementMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_AnnouncementMsg proto.InternalMessageInfo

const Default_GameMessage_AnnouncementMsg_CanJoin bool = true

func (m *GameMessage_AnnouncementMsg) GetPlayers() *GamePlayers {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameMessage_AnnouncementMsg) GetConfig() *GameConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GameMessage_AnnouncementMsg) GetCanJoin() bool {
	if m != nil && m.CanJoin != nil {
		return *m.CanJoin
	}
	return Default_GameMessage_AnnouncementMsg_CanJoin
}

// Новый игрок хочет присоединиться к идущей игре
type GameMessage_JoinMsg struct {
	PlayerType           *PlayerType `protobuf:"varint,1,opt,name=player_type,json=playerType,enum=snakes.PlayerType,def=0" json:"player_type,omitempty"`
	OnlyView             *bool       `protobuf:"varint,2,opt,name=only_view,json=onlyView,def=0" json:"only_view,omitempty"`
	Name                 *string     `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GameMessage_JoinMsg) Reset()      { *m = GameMessage_JoinMsg{} }
func (*GameMessage_JoinMsg) ProtoMessage() {}
func (*GameMessage_JoinMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 5}
}
func (m *GameMessage_JoinMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_JoinMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_JoinMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_JoinMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_JoinMsg.Merge(m, src)
}
func (m *GameMessage_JoinMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_JoinMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_JoinMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_JoinMsg proto.InternalMessageInfo

const Default_GameMessage_JoinMsg_PlayerType PlayerType = PlayerType_HUMAN
const Default_GameMessage_JoinMsg_OnlyView bool = false

func (m *GameMessage_JoinMsg) GetPlayerType() PlayerType {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return Default_GameMessage_JoinMsg_PlayerType
}

func (m *GameMessage_JoinMsg) GetOnlyView() bool {
	if m != nil && m.OnlyView != nil {
		return *m.OnlyView
	}
	return Default_GameMessage_JoinMsg_OnlyView
}

func (m *GameMessage_JoinMsg) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// Ошибка операции (например отказ в присоединении к игре, т.к. нет места на поле)
type GameMessage_ErrorMsg struct {
	ErrorMessage         *string  `protobuf:"bytes,1,req,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameMessage_ErrorMsg) Reset()      { *m = GameMessage_ErrorMsg{} }
func (*GameMessage_ErrorMsg) ProtoMessage() {}
func (*GameMessage_ErrorMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 6}
}
func (m *GameMessage_ErrorMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_ErrorMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_ErrorMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_ErrorMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_ErrorMsg.Merge(m, src)
}
func (m *GameMessage_ErrorMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_ErrorMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_ErrorMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_ErrorMsg proto.InternalMessageInfo

func (m *GameMessage_ErrorMsg) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

// Сообщение о смене роли:
// 1. от заместителя другим игрокам о том, что пора начинать считать его главным (sender_role = MASTER)
// 2. от осознанно выходящего игрока (sender_role = VIEWER)
// 3. от главного к умершему игроку (receiver_role = VIEWER)
// 4. в комбинации с 1,2 или отдельно от них: назначение кого-то заместителем (receiver_role = DEPUTY)
// 5. в комбинации с 2 от главного узла заместителю о том, что он становится главным (receiver_role = MASTER)
type GameMessage_RoleChangeMsg struct {
	SenderRole           *NodeRole `protobuf:"varint,1,opt,name=sender_role,json=senderRole,enum=snakes.NodeRole" json:"sender_role,omitempty"`
	ReceiverRole         *NodeRole `protobuf:"varint,2,opt,name=receiver_role,json=receiverRole,enum=snakes.NodeRole" json:"receiver_role,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameMessage_RoleChangeMsg) Reset()      { *m = GameMessage_RoleChangeMsg{} }
func (*GameMessage_RoleChangeMsg) ProtoMessage() {}
func (*GameMessage_RoleChangeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a7c2e526a11cf97, []int{4, 7}
}
func (m *GameMessage_RoleChangeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage_RoleChangeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage_RoleChangeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage_RoleChangeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage_RoleChangeMsg.Merge(m, src)
}
func (m *GameMessage_RoleChangeMsg) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage_RoleChangeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage_RoleChangeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage_RoleChangeMsg proto.InternalMessageInfo

func (m *GameMessage_RoleChangeMsg) GetSenderRole() NodeRole {
	if m != nil && m.SenderRole != nil {
		return *m.SenderRole
	}
	return NodeRole_NORMAL
}

func (m *GameMessage_RoleChangeMsg) GetReceiverRole() NodeRole {
	if m != nil && m.ReceiverRole != nil {
		return *m.ReceiverRole
	}
	return NodeRole_NORMAL
}

func init() {
	proto.RegisterEnum("snakes.NodeRole", NodeRole_name, NodeRole_value)
	proto.RegisterEnum("snakes.PlayerType", PlayerType_name, PlayerType_value)
	proto.RegisterEnum("snakes.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("snakes.GameState_Snake_SnakeState", GameState_Snake_SnakeState_name, GameState_Snake_SnakeState_value)
	proto.RegisterType((*GamePlayer)(nil), "snakes.GamePlayer")
	proto.RegisterType((*GameConfig)(nil), "snakes.GameConfig")
	proto.RegisterType((*GamePlayers)(nil), "snakes.GamePlayers")
	proto.RegisterType((*GameState)(nil), "snakes.GameState")
	proto.RegisterType((*GameState_Coord)(nil), "snakes.GameState.Coord")
	proto.RegisterType((*GameState_Snake)(nil), "snakes.GameState.Snake")
	proto.RegisterType((*GameMessage)(nil), "snakes.GameMessage")
	proto.RegisterType((*GameMessage_PingMsg)(nil), "snakes.GameMessage.PingMsg")
	proto.RegisterType((*GameMessage_SteerMsg)(nil), "snakes.GameMessage.SteerMsg")
	proto.RegisterType((*GameMessage_AckMsg)(nil), "snakes.GameMessage.AckMsg")
	proto.RegisterType((*GameMessage_StateMsg)(nil), "snakes.GameMessage.StateMsg")
	proto.RegisterType((*GameMessage_AnnouncementMsg)(nil), "snakes.GameMessage.AnnouncementMsg")
	proto.RegisterType((*GameMessage_JoinMsg)(nil), "snakes.GameMessage.JoinMsg")
	proto.RegisterType((*GameMessage_ErrorMsg)(nil), "snakes.GameMessage.ErrorMsg")
	proto.RegisterType((*GameMessage_RoleChangeMsg)(nil), "snakes.GameMessage.RoleChangeMsg")
}

func init() { proto.RegisterFile("snakes.proto", fileDescriptor_5a7c2e526a11cf97) }

var fileDescriptor_5a7c2e526a11cf97 = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0xf7, 0x52, 0xa2, 0x44, 0x0d, 0x2d, 0x59, 0xd9, 0xf7, 0x80, 0x10, 0xcc, 0x7b, 0x8a, 0x9e,
	0xf2, 0x80, 0x28, 0x6e, 0xe2, 0xc8, 0x4a, 0x0a, 0x04, 0xca, 0xa1, 0xb0, 0x63, 0x25, 0x51, 0x11,
	0xd9, 0xc6, 0x5a, 0x49, 0xd0, 0x5e, 0x08, 0x46, 0xdc, 0xc8, 0x6c, 0x2c, 0xae, 0x42, 0x32, 0x7f,
	0x74, 0x28, 0xd0, 0x73, 0x81, 0x7e, 0x8f, 0x7e, 0x84, 0x9e, 0x8a, 0x1e, 0x7b, 0x2a, 0x7a, 0xec,
	0x31, 0xd6, 0x27, 0xe8, 0xa5, 0x68, 0x8f, 0xc5, 0xcc, 0x52, 0x92, 0x93, 0xd8, 0x09, 0x7a, 0x11,
	0x96, 0xbf, 0xf9, 0xcd, 0xec, 0xec, 0x6f, 0x66, 0x67, 0x05, 0xab, 0x49, 0xe4, 0x3f, 0x93, 0xc9,
	0xc6, 0x24, 0x56, 0xa9, 0xe2, 0x05, 0xfd, 0xe5, 0xc2, 0x48, 0x8d, 0x94, 0xc6, 0x1a, 0xbf, 0x30,
	0x80, 0x7b, 0xfe, 0x58, 0xee, 0x1f, 0xf9, 0x53, 0x19, 0x73, 0x0e, 0xf9, 0xc8, 0x1f, 0x4b, 0x87,
	0xd5, 0x8d, 0x66, 0x49, 0xd0, 0x9a, 0x57, 0xc0, 0x08, 0x03, 0xc7, 0xa8, 0x1b, 0x4d, 0x53, 0x18,
	0x61, 0xc0, 0xff, 0x0b, 0x10, 0x4e, 0x3c, 0x3f, 0x08, 0x62, 0x99, 0x24, 0x4e, 0x8e, 0x98, 0xa5,
	0x70, 0xb2, 0xa5, 0x01, 0x0c, 0x31, 0x51, 0x71, 0xea, 0xe4, 0xc9, 0x81, 0xd6, 0xfc, 0xff, 0x90,
	0x8f, 0xd5, 0x91, 0x74, 0xcc, 0xba, 0xd1, 0xac, 0xb4, 0xab, 0x1b, 0x59, 0x5a, 0xbb, 0x2a, 0x90,
	0x42, 0x1d, 0x49, 0x41, 0x56, 0x7e, 0x0d, 0xf2, 0xe9, 0x74, 0x22, 0x9d, 0x42, 0x9d, 0x35, 0x2b,
	0x6d, 0x3e, 0x67, 0xe9, 0xd4, 0x06, 0xd3, 0x89, 0xec, 0x98, 0xf7, 0x1f, 0xf6, 0xb7, 0x76, 0x05,
	0xd1, 0xf8, 0xbf, 0xc1, 0x4c, 0x86, 0x2a, 0x96, 0x4e, 0x91, 0x76, 0xd2, 0x1f, 0x8d, 0x1f, 0x0d,
	0x7d, 0xa0, 0x3b, 0x2a, 0x7a, 0x1a, 0x8e, 0xb8, 0x03, 0xe6, 0xab, 0x30, 0x48, 0x0f, 0x1d, 0x56,
	0x67, 0x4d, 0xb3, 0x63, 0xdc, 0x6c, 0x09, 0x0d, 0x70, 0x17, 0x0a, 0x87, 0x32, 0x1c, 0x1d, 0xa6,
	0x8e, 0xa1, 0x4d, 0x37, 0x5a, 0x22, 0x43, 0x78, 0x03, 0xec, 0xa7, 0x4a, 0x05, 0x5e, 0x92, 0xfa,
	0x69, 0x38, 0x74, 0x72, 0x44, 0x60, 0x9b, 0x02, 0x10, 0x3d, 0x20, 0x90, 0x5f, 0x81, 0x35, 0xe2,
	0x4c, 0x64, 0xec, 0x4d, 0x28, 0x45, 0x27, 0x5f, 0x67, 0x4d, 0x03, 0x79, 0x65, 0xb4, 0xec, 0xcb,
	0x38, 0x53, 0x75, 0x1d, 0x2a, 0x18, 0x49, 0x7a, 0x81, 0x3c, 0xf2, 0xa7, 0xde, 0x38, 0x71, 0x4c,
	0x8a, 0x98, 0xdf, 0x6c, 0xb5, 0x5a, 0x62, 0x95, 0x6c, 0x3b, 0x68, 0xea, 0x27, 0xfc, 0x0a, 0x54,
	0x02, 0xe9, 0x07, 0x9e, 0x8e, 0x1d, 0xab, 0x27, 0x24, 0x87, 0xd1, 0xc9, 0xb5, 0x36, 0x36, 0xc5,
	0x2a, 0x9a, 0xee, 0x62, 0xec, 0x58, 0x3d, 0xe1, 0x97, 0xa1, 0x3c, 0x09, 0xa3, 0xd1, 0x32, 0x6a,
	0x91, 0xa2, 0xe6, 0x36, 0x5b, 0x2d, 0x61, 0xa3, 0x65, 0x1e, 0xf3, 0x13, 0x58, 0x8b, 0x54, 0x20,
	0xbd, 0x34, 0x1c, 0x4b, 0xf5, 0x22, 0x45, 0xaa, 0xa5, 0xa9, 0xb7, 0x5a, 0x2d, 0x51, 0x46, 0xdb,
	0x40, 0x9b, 0xfa, 0x49, 0xe3, 0x36, 0xd8, 0xcb, 0x86, 0x48, 0xf8, 0x55, 0x28, 0xea, 0xd3, 0x25,
	0x0e, 0xab, 0xe7, 0x9a, 0xf6, 0xb2, 0x2e, 0x4b, 0x96, 0x98, 0x53, 0x1a, 0xdf, 0xe6, 0xa1, 0x84,
	0x38, 0x6a, 0x24, 0xf9, 0x45, 0xb0, 0xf5, 0xb9, 0x55, 0x1c, 0xc8, 0x98, 0x9a, 0xca, 0x14, 0x40,
	0xd0, 0x1e, 0x22, 0xfc, 0x3a, 0x64, 0x3d, 0xe9, 0x18, 0x14, 0xfb, 0xfc, 0xc9, 0xd8, 0x14, 0x63,
	0xe3, 0x00, 0x01, 0x91, 0xd1, 0xf8, 0x35, 0x30, 0x51, 0x18, 0x6c, 0xbb, 0x33, 0xf8, 0x77, 0x94,
	0x8a, 0x03, 0xa1, 0x59, 0xfc, 0xda, 0x32, 0x79, 0x6c, 0x47, 0xbb, 0xfd, 0xaf, 0xf7, 0x93, 0x4f,
	0x16, 0xd9, 0xf3, 0x75, 0x28, 0x0c, 0xa9, 0x6d, 0xa8, 0x51, 0xdf, 0x39, 0xaa, 0x6e, 0x28, 0x91,
	0x31, 0xdc, 0x2b, 0x60, 0xd2, 0x56, 0x7c, 0x0d, 0xd8, 0x6b, 0xea, 0xae, 0x73, 0x1d, 0xd6, 0x12,
	0xec, 0x35, 0x02, 0x53, 0xea, 0x29, 0x0d, 0x4c, 0xdd, 0x3f, 0x18, 0x98, 0x74, 0x0c, 0x7e, 0x01,
	0x4a, 0x7a, 0x2f, 0x2f, 0x0c, 0x32, 0x39, 0x2c, 0x0d, 0xf4, 0x02, 0x14, 0x63, 0xa2, 0xc2, 0x28,
	0xfd, 0x80, 0x18, 0xfa, 0x70, 0x19, 0x8d, 0x7f, 0x06, 0x26, 0x69, 0x49, 0x77, 0xb0, 0xd2, 0x6e,
	0x9c, 0x21, 0x9e, 0xfe, 0x25, 0xa0, 0x63, 0x6e, 0x3d, 0xe8, 0x3d, 0xea, 0x0a, 0xed, 0xc7, 0x6f,
	0x41, 0xe5, 0x10, 0x7b, 0x2d, 0x08, 0x63, 0x39, 0x4c, 0x43, 0x15, 0x91, 0x4a, 0x95, 0xf6, 0xb9,
	0x79, 0xa4, 0x9d, 0xb9, 0x41, 0x94, 0x91, 0xb8, 0xf8, 0x6c, 0x5c, 0x02, 0x58, 0x46, 0xe5, 0x25,
	0xd0, 0x71, 0xab, 0x2b, 0x1c, 0xa0, 0xf0, 0xe5, 0x5e, 0x7f, 0xbb, 0xd7, 0xad, 0xb2, 0xc6, 0x9f,
	0x96, 0x6e, 0xa5, 0xbe, 0x4c, 0x12, 0x7f, 0x24, 0xf9, 0x79, 0x28, 0x8e, 0x93, 0x91, 0x97, 0xc8,
	0xe7, 0x74, 0xf6, 0x9c, 0x28, 0x8c, 0x93, 0xd1, 0x81, 0x7c, 0x8e, 0xb2, 0x24, 0x32, 0x0a, 0xb4,
	0x2c, 0x80, 0x9d, 0x29, 0x2c, 0x0d, 0xf4, 0x02, 0x6c, 0xa2, 0x58, 0x0e, 0x65, 0xf8, 0x52, 0x9b,
	0x6d, 0x32, 0xc3, 0x1c, 0xea, 0x05, 0x7c, 0x13, 0xf2, 0xd8, 0xec, 0x24, 0xb9, 0xdd, 0xbe, 0x70,
	0x52, 0x85, 0x6c, 0xe7, 0x8d, 0xfd, 0x30, 0x1a, 0xf5, 0x93, 0xd1, 0xfd, 0x15, 0x41, 0x54, 0x7e,
	0x13, 0x95, 0x93, 0x32, 0xa6, 0x9b, 0x6d, 0xb7, 0xff, 0x73, 0x9a, 0xcf, 0x01, 0x12, 0xb4, 0x93,
	0x26, 0xf3, 0x0d, 0xc8, 0xf9, 0xc3, 0x67, 0x74, 0xcb, 0xed, 0xb6, 0x7b, 0x9a, 0xcf, 0xd6, 0xf0,
	0x99, 0xf6, 0x40, 0xa2, 0xde, 0x05, 0xeb, 0x63, 0x7e, 0x68, 0x17, 0x3f, 0x95, 0x8b, 0x5d, 0x50,
	0xcc, 0x1e, 0xac, 0xfa, 0x51, 0xa4, 0x5e, 0x44, 0x43, 0x39, 0x96, 0x51, 0x4a, 0xd7, 0xdf, 0x6e,
	0x5f, 0x3a, 0x75, 0xbb, 0x13, 0x3c, 0x1d, 0xe3, 0x2d, 0x57, 0x54, 0xe6, 0x2b, 0x15, 0x46, 0x34,
	0x17, 0xce, 0x50, 0xe6, 0x73, 0x15, 0x46, 0x99, 0x32, 0x48, 0xc5, 0x9c, 0x65, 0x1c, 0xab, 0x98,
	0x06, 0xc4, 0x19, 0x39, 0x77, 0x91, 0x90, 0xe5, 0x4c, 0x64, 0xbe, 0x03, 0x36, 0x4e, 0x70, 0x6f,
	0x78, 0xe8, 0x47, 0x23, 0xe9, 0x94, 0xc8, 0xf7, 0x7f, 0xa7, 0xf9, 0xe2, 0xb8, 0xbf, 0x43, 0x2c,
	0x1d, 0x00, 0xe2, 0x05, 0xe0, 0x96, 0xa0, 0x98, 0x15, 0xca, 0xbd, 0x0d, 0xd6, 0x5c, 0x7f, 0x7e,
	0x1d, 0x4a, 0xcb, 0x06, 0x65, 0x67, 0x35, 0xe8, 0x92, 0xe3, 0x5a, 0x50, 0xd0, 0x85, 0x70, 0x6f,
	0x60, 0x18, 0x2d, 0x30, 0xbf, 0x3c, 0xaf, 0x06, 0xa3, 0xbb, 0x7d, 0xee, 0xbd, 0xdb, 0x92, 0x15,
	0xc0, 0xfd, 0x8e, 0xc1, 0xda, 0x3b, 0xca, 0x9e, 0x1c, 0x24, 0xec, 0x1f, 0x0d, 0x12, 0xe3, 0x63,
	0x83, 0x84, 0x5f, 0x04, 0x6b, 0xe8, 0x47, 0x1e, 0x15, 0x0a, 0xdb, 0xd1, 0xea, 0xe4, 0xd3, 0xf8,
	0x85, 0x14, 0xc5, 0xa1, 0x1f, 0x61, 0x75, 0xdc, 0xaf, 0xa1, 0x98, 0x55, 0x89, 0x77, 0xc0, 0xce,
	0xe6, 0x07, 0x3d, 0x94, 0xec, 0x63, 0x0f, 0x25, 0x4c, 0x16, 0x10, 0x6f, 0x40, 0x49, 0x45, 0x47,
	0x53, 0xef, 0x65, 0x28, 0x5f, 0xd1, 0x5d, 0xb1, 0x3a, 0xe6, 0x53, 0xff, 0x28, 0x91, 0xc2, 0x42,
	0xfc, 0x51, 0x28, 0x5f, 0x2d, 0x9e, 0xff, 0xdc, 0xf2, 0xf9, 0x77, 0xaf, 0x83, 0x35, 0x2f, 0x38,
	0xbf, 0x04, 0x65, 0x2a, 0xb8, 0x37, 0xd6, 0xe5, 0xcc, 0xfe, 0x27, 0xac, 0x12, 0x98, 0x95, 0xd8,
	0x9d, 0x42, 0xf9, 0xad, 0x2a, 0xf3, 0x4d, 0xb0, 0xb3, 0xeb, 0x4d, 0x7f, 0x02, 0x74, 0xd6, 0xef,
	0xff, 0x09, 0x00, 0x4d, 0xc2, 0x35, 0xff, 0x14, 0xca, 0x8b, 0x4b, 0x4f, 0x4e, 0xc6, 0x19, 0x4e,
	0xab, 0x73, 0x1a, 0x7e, 0x6d, 0x17, 0x20, 0x8f, 0x67, 0x5d, 0xef, 0x80, 0x35, 0x67, 0xe0, 0x44,
	0xda, 0xdd, 0x13, 0xfd, 0xad, 0x07, 0x7a, 0x3a, 0xf5, 0xb7, 0x0e, 0x06, 0x5d, 0x51, 0x65, 0xb8,
	0xde, 0xe9, 0xee, 0x3f, 0x1c, 0x7c, 0x51, 0x35, 0x70, 0xfd, 0xa8, 0xd7, 0x7d, 0xdc, 0x15, 0xd5,
	0xdc, 0x7a, 0x03, 0x60, 0x29, 0x24, 0x8e, 0x36, 0x92, 0xb2, 0xba, 0x82, 0x4b, 0xb1, 0xb7, 0xbd,
	0x37, 0xa8, 0xb2, 0xf5, 0x36, 0x94, 0x16, 0x9d, 0xc7, 0x0b, 0x60, 0x3c, 0xdc, 0xaf, 0x32, 0x6e,
	0x41, 0x7e, 0x67, 0xef, 0xf1, 0x6e, 0xd5, 0xc0, 0xd5, 0x83, 0xee, 0xdd, 0x41, 0x35, 0x47, 0x3e,
	0xbd, 0x7b, 0xf7, 0x07, 0xd5, 0xfc, 0xf6, 0xd5, 0xdf, 0x8e, 0x6b, 0x2b, 0x6f, 0x8e, 0x6b, 0xec,
	0xf7, 0xe3, 0x1a, 0xfb, 0xeb, 0xb8, 0xc6, 0xbe, 0x99, 0xd5, 0xd8, 0xf7, 0xb3, 0x1a, 0xfb, 0x61,
	0x56, 0x63, 0x3f, 0xcd, 0x6a, 0xec, 0xe7, 0x59, 0x8d, 0xfd, 0x3a, 0xab, 0xb1, 0x37, 0xb3, 0x1a,
	0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x25, 0xc8, 0x6c, 0xba, 0x09, 0x00, 0x00,
}

func (this *GamePlayer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GamePlayer)
	if !ok {
		that2, ok := that.(GamePlayer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GamePlayer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GamePlayer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GamePlayer but is not nil && this == nil")
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return fmt.Errorf("Name this(%v) Not Equal that(%v)", *this.Name, *that1.Name)
		}
	} else if this.Name != nil {
		return fmt.Errorf("this.Name == nil && that.Name != nil")
	} else if that1.Name != nil {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.IpAddress != nil && that1.IpAddress != nil {
		if *this.IpAddress != *that1.IpAddress {
			return fmt.Errorf("IpAddress this(%v) Not Equal that(%v)", *this.IpAddress, *that1.IpAddress)
		}
	} else if this.IpAddress != nil {
		return fmt.Errorf("this.IpAddress == nil && that.IpAddress != nil")
	} else if that1.IpAddress != nil {
		return fmt.Errorf("IpAddress this(%v) Not Equal that(%v)", this.IpAddress, that1.IpAddress)
	}
	if this.Port != nil && that1.Port != nil {
		if *this.Port != *that1.Port {
			return fmt.Errorf("Port this(%v) Not Equal that(%v)", *this.Port, *that1.Port)
		}
	} else if this.Port != nil {
		return fmt.Errorf("this.Port == nil && that.Port != nil")
	} else if that1.Port != nil {
		return fmt.Errorf("Port this(%v) Not Equal that(%v)", this.Port, that1.Port)
	}
	if this.Role != nil && that1.Role != nil {
		if *this.Role != *that1.Role {
			return fmt.Errorf("Role this(%v) Not Equal that(%v)", *this.Role, *that1.Role)
		}
	} else if this.Role != nil {
		return fmt.Errorf("this.Role == nil && that.Role != nil")
	} else if that1.Role != nil {
		return fmt.Errorf("Role this(%v) Not Equal that(%v)", this.Role, that1.Role)
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return fmt.Errorf("Type this(%v) Not Equal that(%v)", *this.Type, *that1.Type)
		}
	} else if this.Type != nil {
		return fmt.Errorf("this.Type == nil && that.Type != nil")
	} else if that1.Type != nil {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Score != nil && that1.Score != nil {
		if *this.Score != *that1.Score {
			return fmt.Errorf("Score this(%v) Not Equal that(%v)", *this.Score, *that1.Score)
		}
	} else if this.Score != nil {
		return fmt.Errorf("this.Score == nil && that.Score != nil")
	} else if that1.Score != nil {
		return fmt.Errorf("Score this(%v) Not Equal that(%v)", this.Score, that1.Score)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GamePlayer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GamePlayer)
	if !ok {
		that2, ok := that.(GamePlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.IpAddress != nil && that1.IpAddress != nil {
		if *this.IpAddress != *that1.IpAddress {
			return false
		}
	} else if this.IpAddress != nil {
		return false
	} else if that1.IpAddress != nil {
		return false
	}
	if this.Port != nil && that1.Port != nil {
		if *this.Port != *that1.Port {
			return false
		}
	} else if this.Port != nil {
		return false
	} else if that1.Port != nil {
		return false
	}
	if this.Role != nil && that1.Role != nil {
		if *this.Role != *that1.Role {
			return false
		}
	} else if this.Role != nil {
		return false
	} else if that1.Role != nil {
		return false
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if this.Score != nil && that1.Score != nil {
		if *this.Score != *that1.Score {
			return false
		}
	} else if this.Score != nil {
		return false
	} else if that1.Score != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameConfig) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameConfig)
	if !ok {
		that2, ok := that.(GameConfig)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameConfig")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameConfig but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameConfig but is not nil && this == nil")
	}
	if this.Width != nil && that1.Width != nil {
		if *this.Width != *that1.Width {
			return fmt.Errorf("Width this(%v) Not Equal that(%v)", *this.Width, *that1.Width)
		}
	} else if this.Width != nil {
		return fmt.Errorf("this.Width == nil && that.Width != nil")
	} else if that1.Width != nil {
		return fmt.Errorf("Width this(%v) Not Equal that(%v)", this.Width, that1.Width)
	}
	if this.Height != nil && that1.Height != nil {
		if *this.Height != *that1.Height {
			return fmt.Errorf("Height this(%v) Not Equal that(%v)", *this.Height, *that1.Height)
		}
	} else if this.Height != nil {
		return fmt.Errorf("this.Height == nil && that.Height != nil")
	} else if that1.Height != nil {
		return fmt.Errorf("Height this(%v) Not Equal that(%v)", this.Height, that1.Height)
	}
	if this.FoodStatic != nil && that1.FoodStatic != nil {
		if *this.FoodStatic != *that1.FoodStatic {
			return fmt.Errorf("FoodStatic this(%v) Not Equal that(%v)", *this.FoodStatic, *that1.FoodStatic)
		}
	} else if this.FoodStatic != nil {
		return fmt.Errorf("this.FoodStatic == nil && that.FoodStatic != nil")
	} else if that1.FoodStatic != nil {
		return fmt.Errorf("FoodStatic this(%v) Not Equal that(%v)", this.FoodStatic, that1.FoodStatic)
	}
	if this.FoodPerPlayer != nil && that1.FoodPerPlayer != nil {
		if *this.FoodPerPlayer != *that1.FoodPerPlayer {
			return fmt.Errorf("FoodPerPlayer this(%v) Not Equal that(%v)", *this.FoodPerPlayer, *that1.FoodPerPlayer)
		}
	} else if this.FoodPerPlayer != nil {
		return fmt.Errorf("this.FoodPerPlayer == nil && that.FoodPerPlayer != nil")
	} else if that1.FoodPerPlayer != nil {
		return fmt.Errorf("FoodPerPlayer this(%v) Not Equal that(%v)", this.FoodPerPlayer, that1.FoodPerPlayer)
	}
	if this.StateDelayMs != nil && that1.StateDelayMs != nil {
		if *this.StateDelayMs != *that1.StateDelayMs {
			return fmt.Errorf("StateDelayMs this(%v) Not Equal that(%v)", *this.StateDelayMs, *that1.StateDelayMs)
		}
	} else if this.StateDelayMs != nil {
		return fmt.Errorf("this.StateDelayMs == nil && that.StateDelayMs != nil")
	} else if that1.StateDelayMs != nil {
		return fmt.Errorf("StateDelayMs this(%v) Not Equal that(%v)", this.StateDelayMs, that1.StateDelayMs)
	}
	if this.DeadFoodProb != nil && that1.DeadFoodProb != nil {
		if *this.DeadFoodProb != *that1.DeadFoodProb {
			return fmt.Errorf("DeadFoodProb this(%v) Not Equal that(%v)", *this.DeadFoodProb, *that1.DeadFoodProb)
		}
	} else if this.DeadFoodProb != nil {
		return fmt.Errorf("this.DeadFoodProb == nil && that.DeadFoodProb != nil")
	} else if that1.DeadFoodProb != nil {
		return fmt.Errorf("DeadFoodProb this(%v) Not Equal that(%v)", this.DeadFoodProb, that1.DeadFoodProb)
	}
	if this.PingDelayMs != nil && that1.PingDelayMs != nil {
		if *this.PingDelayMs != *that1.PingDelayMs {
			return fmt.Errorf("PingDelayMs this(%v) Not Equal that(%v)", *this.PingDelayMs, *that1.PingDelayMs)
		}
	} else if this.PingDelayMs != nil {
		return fmt.Errorf("this.PingDelayMs == nil && that.PingDelayMs != nil")
	} else if that1.PingDelayMs != nil {
		return fmt.Errorf("PingDelayMs this(%v) Not Equal that(%v)", this.PingDelayMs, that1.PingDelayMs)
	}
	if this.NodeTimeoutMs != nil && that1.NodeTimeoutMs != nil {
		if *this.NodeTimeoutMs != *that1.NodeTimeoutMs {
			return fmt.Errorf("NodeTimeoutMs this(%v) Not Equal that(%v)", *this.NodeTimeoutMs, *that1.NodeTimeoutMs)
		}
	} else if this.NodeTimeoutMs != nil {
		return fmt.Errorf("this.NodeTimeoutMs == nil && that.NodeTimeoutMs != nil")
	} else if that1.NodeTimeoutMs != nil {
		return fmt.Errorf("NodeTimeoutMs this(%v) Not Equal that(%v)", this.NodeTimeoutMs, that1.NodeTimeoutMs)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameConfig)
	if !ok {
		that2, ok := that.(GameConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != nil && that1.Width != nil {
		if *this.Width != *that1.Width {
			return false
		}
	} else if this.Width != nil {
		return false
	} else if that1.Width != nil {
		return false
	}
	if this.Height != nil && that1.Height != nil {
		if *this.Height != *that1.Height {
			return false
		}
	} else if this.Height != nil {
		return false
	} else if that1.Height != nil {
		return false
	}
	if this.FoodStatic != nil && that1.FoodStatic != nil {
		if *this.FoodStatic != *that1.FoodStatic {
			return false
		}
	} else if this.FoodStatic != nil {
		return false
	} else if that1.FoodStatic != nil {
		return false
	}
	if this.FoodPerPlayer != nil && that1.FoodPerPlayer != nil {
		if *this.FoodPerPlayer != *that1.FoodPerPlayer {
			return false
		}
	} else if this.FoodPerPlayer != nil {
		return false
	} else if that1.FoodPerPlayer != nil {
		return false
	}
	if this.StateDelayMs != nil && that1.StateDelayMs != nil {
		if *this.StateDelayMs != *that1.StateDelayMs {
			return false
		}
	} else if this.StateDelayMs != nil {
		return false
	} else if that1.StateDelayMs != nil {
		return false
	}
	if this.DeadFoodProb != nil && that1.DeadFoodProb != nil {
		if *this.DeadFoodProb != *that1.DeadFoodProb {
			return false
		}
	} else if this.DeadFoodProb != nil {
		return false
	} else if that1.DeadFoodProb != nil {
		return false
	}
	if this.PingDelayMs != nil && that1.PingDelayMs != nil {
		if *this.PingDelayMs != *that1.PingDelayMs {
			return false
		}
	} else if this.PingDelayMs != nil {
		return false
	} else if that1.PingDelayMs != nil {
		return false
	}
	if this.NodeTimeoutMs != nil && that1.NodeTimeoutMs != nil {
		if *this.NodeTimeoutMs != *that1.NodeTimeoutMs {
			return false
		}
	} else if this.NodeTimeoutMs != nil {
		return false
	} else if that1.NodeTimeoutMs != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GamePlayers) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GamePlayers)
	if !ok {
		that2, ok := that.(GamePlayers)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GamePlayers")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GamePlayers but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GamePlayers but is not nil && this == nil")
	}
	if len(this.Players) != len(that1.Players) {
		return fmt.Errorf("Players this(%v) Not Equal that(%v)", len(this.Players), len(that1.Players))
	}
	for i := range this.Players {
		if !this.Players[i].Equal(that1.Players[i]) {
			return fmt.Errorf("Players this[%v](%v) Not Equal that[%v](%v)", i, this.Players[i], i, that1.Players[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GamePlayers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GamePlayers)
	if !ok {
		that2, ok := that.(GamePlayers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Players) != len(that1.Players) {
		return false
	}
	for i := range this.Players {
		if !this.Players[i].Equal(that1.Players[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameState) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameState)
	if !ok {
		that2, ok := that.(GameState)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameState")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameState but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameState but is not nil && this == nil")
	}
	if this.StateOrder != nil && that1.StateOrder != nil {
		if *this.StateOrder != *that1.StateOrder {
			return fmt.Errorf("StateOrder this(%v) Not Equal that(%v)", *this.StateOrder, *that1.StateOrder)
		}
	} else if this.StateOrder != nil {
		return fmt.Errorf("this.StateOrder == nil && that.StateOrder != nil")
	} else if that1.StateOrder != nil {
		return fmt.Errorf("StateOrder this(%v) Not Equal that(%v)", this.StateOrder, that1.StateOrder)
	}
	if len(this.Snakes) != len(that1.Snakes) {
		return fmt.Errorf("Snakes this(%v) Not Equal that(%v)", len(this.Snakes), len(that1.Snakes))
	}
	for i := range this.Snakes {
		if !this.Snakes[i].Equal(that1.Snakes[i]) {
			return fmt.Errorf("Snakes this[%v](%v) Not Equal that[%v](%v)", i, this.Snakes[i], i, that1.Snakes[i])
		}
	}
	if len(this.Foods) != len(that1.Foods) {
		return fmt.Errorf("Foods this(%v) Not Equal that(%v)", len(this.Foods), len(that1.Foods))
	}
	for i := range this.Foods {
		if !this.Foods[i].Equal(that1.Foods[i]) {
			return fmt.Errorf("Foods this[%v](%v) Not Equal that[%v](%v)", i, this.Foods[i], i, that1.Foods[i])
		}
	}
	if !this.Players.Equal(that1.Players) {
		return fmt.Errorf("Players this(%v) Not Equal that(%v)", this.Players, that1.Players)
	}
	if !this.Config.Equal(that1.Config) {
		return fmt.Errorf("Config this(%v) Not Equal that(%v)", this.Config, that1.Config)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameState)
	if !ok {
		that2, ok := that.(GameState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StateOrder != nil && that1.StateOrder != nil {
		if *this.StateOrder != *that1.StateOrder {
			return false
		}
	} else if this.StateOrder != nil {
		return false
	} else if that1.StateOrder != nil {
		return false
	}
	if len(this.Snakes) != len(that1.Snakes) {
		return false
	}
	for i := range this.Snakes {
		if !this.Snakes[i].Equal(that1.Snakes[i]) {
			return false
		}
	}
	if len(this.Foods) != len(that1.Foods) {
		return false
	}
	for i := range this.Foods {
		if !this.Foods[i].Equal(that1.Foods[i]) {
			return false
		}
	}
	if !this.Players.Equal(that1.Players) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameState_Coord) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameState_Coord)
	if !ok {
		that2, ok := that.(GameState_Coord)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameState_Coord")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameState_Coord but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameState_Coord but is not nil && this == nil")
	}
	if this.X != nil && that1.X != nil {
		if *this.X != *that1.X {
			return fmt.Errorf("X this(%v) Not Equal that(%v)", *this.X, *that1.X)
		}
	} else if this.X != nil {
		return fmt.Errorf("this.X == nil && that.X != nil")
	} else if that1.X != nil {
		return fmt.Errorf("X this(%v) Not Equal that(%v)", this.X, that1.X)
	}
	if this.Y != nil && that1.Y != nil {
		if *this.Y != *that1.Y {
			return fmt.Errorf("Y this(%v) Not Equal that(%v)", *this.Y, *that1.Y)
		}
	} else if this.Y != nil {
		return fmt.Errorf("this.Y == nil && that.Y != nil")
	} else if that1.Y != nil {
		return fmt.Errorf("Y this(%v) Not Equal that(%v)", this.Y, that1.Y)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameState_Coord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameState_Coord)
	if !ok {
		that2, ok := that.(GameState_Coord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != nil && that1.X != nil {
		if *this.X != *that1.X {
			return false
		}
	} else if this.X != nil {
		return false
	} else if that1.X != nil {
		return false
	}
	if this.Y != nil && that1.Y != nil {
		if *this.Y != *that1.Y {
			return false
		}
	} else if this.Y != nil {
		return false
	} else if that1.Y != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameState_Snake) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameState_Snake)
	if !ok {
		that2, ok := that.(GameState_Snake)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameState_Snake")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameState_Snake but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameState_Snake but is not nil && this == nil")
	}
	if this.PlayerId != nil && that1.PlayerId != nil {
		if *this.PlayerId != *that1.PlayerId {
			return fmt.Errorf("PlayerId this(%v) Not Equal that(%v)", *this.PlayerId, *that1.PlayerId)
		}
	} else if this.PlayerId != nil {
		return fmt.Errorf("this.PlayerId == nil && that.PlayerId != nil")
	} else if that1.PlayerId != nil {
		return fmt.Errorf("PlayerId this(%v) Not Equal that(%v)", this.PlayerId, that1.PlayerId)
	}
	if len(this.Points) != len(that1.Points) {
		return fmt.Errorf("Points this(%v) Not Equal that(%v)", len(this.Points), len(that1.Points))
	}
	for i := range this.Points {
		if !this.Points[i].Equal(that1.Points[i]) {
			return fmt.Errorf("Points this[%v](%v) Not Equal that[%v](%v)", i, this.Points[i], i, that1.Points[i])
		}
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return fmt.Errorf("State this(%v) Not Equal that(%v)", *this.State, *that1.State)
		}
	} else if this.State != nil {
		return fmt.Errorf("this.State == nil && that.State != nil")
	} else if that1.State != nil {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if this.HeadDirection != nil && that1.HeadDirection != nil {
		if *this.HeadDirection != *that1.HeadDirection {
			return fmt.Errorf("HeadDirection this(%v) Not Equal that(%v)", *this.HeadDirection, *that1.HeadDirection)
		}
	} else if this.HeadDirection != nil {
		return fmt.Errorf("this.HeadDirection == nil && that.HeadDirection != nil")
	} else if that1.HeadDirection != nil {
		return fmt.Errorf("HeadDirection this(%v) Not Equal that(%v)", this.HeadDirection, that1.HeadDirection)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameState_Snake) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameState_Snake)
	if !ok {
		that2, ok := that.(GameState_Snake)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlayerId != nil && that1.PlayerId != nil {
		if *this.PlayerId != *that1.PlayerId {
			return false
		}
	} else if this.PlayerId != nil {
		return false
	} else if that1.PlayerId != nil {
		return false
	}
	if len(this.Points) != len(that1.Points) {
		return false
	}
	for i := range this.Points {
		if !this.Points[i].Equal(that1.Points[i]) {
			return false
		}
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return false
		}
	} else if this.State != nil {
		return false
	} else if that1.State != nil {
		return false
	}
	if this.HeadDirection != nil && that1.HeadDirection != nil {
		if *this.HeadDirection != *that1.HeadDirection {
			return false
		}
	} else if this.HeadDirection != nil {
		return false
	} else if that1.HeadDirection != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage)
	if !ok {
		that2, ok := that.(GameMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage but is not nil && this == nil")
	}
	if this.MsgSeq != nil && that1.MsgSeq != nil {
		if *this.MsgSeq != *that1.MsgSeq {
			return fmt.Errorf("MsgSeq this(%v) Not Equal that(%v)", *this.MsgSeq, *that1.MsgSeq)
		}
	} else if this.MsgSeq != nil {
		return fmt.Errorf("this.MsgSeq == nil && that.MsgSeq != nil")
	} else if that1.MsgSeq != nil {
		return fmt.Errorf("MsgSeq this(%v) Not Equal that(%v)", this.MsgSeq, that1.MsgSeq)
	}
	if this.SenderId != nil && that1.SenderId != nil {
		if *this.SenderId != *that1.SenderId {
			return fmt.Errorf("SenderId this(%v) Not Equal that(%v)", *this.SenderId, *that1.SenderId)
		}
	} else if this.SenderId != nil {
		return fmt.Errorf("this.SenderId == nil && that.SenderId != nil")
	} else if that1.SenderId != nil {
		return fmt.Errorf("SenderId this(%v) Not Equal that(%v)", this.SenderId, that1.SenderId)
	}
	if this.ReceiverId != nil && that1.ReceiverId != nil {
		if *this.ReceiverId != *that1.ReceiverId {
			return fmt.Errorf("ReceiverId this(%v) Not Equal that(%v)", *this.ReceiverId, *that1.ReceiverId)
		}
	} else if this.ReceiverId != nil {
		return fmt.Errorf("this.ReceiverId == nil && that.ReceiverId != nil")
	} else if that1.ReceiverId != nil {
		return fmt.Errorf("ReceiverId this(%v) Not Equal that(%v)", this.ReceiverId, that1.ReceiverId)
	}
	if that1.Type == nil {
		if this.Type != nil {
			return fmt.Errorf("this.Type != nil && that1.Type == nil")
		}
	} else if this.Type == nil {
		return fmt.Errorf("this.Type == nil && that1.Type != nil")
	} else if err := this.Type.VerboseEqual(that1.Type); err != nil {
		return err
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_Ping) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_Ping)
	if !ok {
		that2, ok := that.(GameMessage_Ping)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_Ping")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_Ping but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_Ping but is not nil && this == nil")
	}
	if !this.Ping.Equal(that1.Ping) {
		return fmt.Errorf("Ping this(%v) Not Equal that(%v)", this.Ping, that1.Ping)
	}
	return nil
}
func (this *GameMessage_Steer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_Steer)
	if !ok {
		that2, ok := that.(GameMessage_Steer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_Steer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_Steer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_Steer but is not nil && this == nil")
	}
	if !this.Steer.Equal(that1.Steer) {
		return fmt.Errorf("Steer this(%v) Not Equal that(%v)", this.Steer, that1.Steer)
	}
	return nil
}
func (this *GameMessage_Ack) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_Ack)
	if !ok {
		that2, ok := that.(GameMessage_Ack)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_Ack")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_Ack but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_Ack but is not nil && this == nil")
	}
	if !this.Ack.Equal(that1.Ack) {
		return fmt.Errorf("Ack this(%v) Not Equal that(%v)", this.Ack, that1.Ack)
	}
	return nil
}
func (this *GameMessage_State) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_State)
	if !ok {
		that2, ok := that.(GameMessage_State)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_State")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_State but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_State but is not nil && this == nil")
	}
	if !this.State.Equal(that1.State) {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	return nil
}
func (this *GameMessage_Announcement) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_Announcement)
	if !ok {
		that2, ok := that.(GameMessage_Announcement)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_Announcement")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_Announcement but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_Announcement but is not nil && this == nil")
	}
	if !this.Announcement.Equal(that1.Announcement) {
		return fmt.Errorf("Announcement this(%v) Not Equal that(%v)", this.Announcement, that1.Announcement)
	}
	return nil
}
func (this *GameMessage_Join) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_Join)
	if !ok {
		that2, ok := that.(GameMessage_Join)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_Join")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_Join but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_Join but is not nil && this == nil")
	}
	if !this.Join.Equal(that1.Join) {
		return fmt.Errorf("Join this(%v) Not Equal that(%v)", this.Join, that1.Join)
	}
	return nil
}
func (this *GameMessage_Error) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_Error)
	if !ok {
		that2, ok := that.(GameMessage_Error)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_Error")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_Error but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_Error but is not nil && this == nil")
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}
func (this *GameMessage_RoleChange) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_RoleChange)
	if !ok {
		that2, ok := that.(GameMessage_RoleChange)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_RoleChange")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_RoleChange but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_RoleChange but is not nil && this == nil")
	}
	if !this.RoleChange.Equal(that1.RoleChange) {
		return fmt.Errorf("RoleChange this(%v) Not Equal that(%v)", this.RoleChange, that1.RoleChange)
	}
	return nil
}
func (this *GameMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage)
	if !ok {
		that2, ok := that.(GameMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgSeq != nil && that1.MsgSeq != nil {
		if *this.MsgSeq != *that1.MsgSeq {
			return false
		}
	} else if this.MsgSeq != nil {
		return false
	} else if that1.MsgSeq != nil {
		return false
	}
	if this.SenderId != nil && that1.SenderId != nil {
		if *this.SenderId != *that1.SenderId {
			return false
		}
	} else if this.SenderId != nil {
		return false
	} else if that1.SenderId != nil {
		return false
	}
	if this.ReceiverId != nil && that1.ReceiverId != nil {
		if *this.ReceiverId != *that1.ReceiverId {
			return false
		}
	} else if this.ReceiverId != nil {
		return false
	} else if that1.ReceiverId != nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_Ping)
	if !ok {
		that2, ok := that.(GameMessage_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ping.Equal(that1.Ping) {
		return false
	}
	return true
}
func (this *GameMessage_Steer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_Steer)
	if !ok {
		that2, ok := that.(GameMessage_Steer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Steer.Equal(that1.Steer) {
		return false
	}
	return true
}
func (this *GameMessage_Ack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_Ack)
	if !ok {
		that2, ok := that.(GameMessage_Ack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ack.Equal(that1.Ack) {
		return false
	}
	return true
}
func (this *GameMessage_State) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_State)
	if !ok {
		that2, ok := that.(GameMessage_State)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	return true
}
func (this *GameMessage_Announcement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_Announcement)
	if !ok {
		that2, ok := that.(GameMessage_Announcement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Announcement.Equal(that1.Announcement) {
		return false
	}
	return true
}
func (this *GameMessage_Join) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_Join)
	if !ok {
		that2, ok := that.(GameMessage_Join)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Join.Equal(that1.Join) {
		return false
	}
	return true
}
func (this *GameMessage_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_Error)
	if !ok {
		that2, ok := that.(GameMessage_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *GameMessage_RoleChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_RoleChange)
	if !ok {
		that2, ok := that.(GameMessage_RoleChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoleChange.Equal(that1.RoleChange) {
		return false
	}
	return true
}
func (this *GameMessage_PingMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_PingMsg)
	if !ok {
		that2, ok := that.(GameMessage_PingMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_PingMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_PingMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_PingMsg but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_PingMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_PingMsg)
	if !ok {
		that2, ok := that.(GameMessage_PingMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_SteerMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_SteerMsg)
	if !ok {
		that2, ok := that.(GameMessage_SteerMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_SteerMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_SteerMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_SteerMsg but is not nil && this == nil")
	}
	if this.Direction != nil && that1.Direction != nil {
		if *this.Direction != *that1.Direction {
			return fmt.Errorf("Direction this(%v) Not Equal that(%v)", *this.Direction, *that1.Direction)
		}
	} else if this.Direction != nil {
		return fmt.Errorf("this.Direction == nil && that.Direction != nil")
	} else if that1.Direction != nil {
		return fmt.Errorf("Direction this(%v) Not Equal that(%v)", this.Direction, that1.Direction)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_SteerMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_SteerMsg)
	if !ok {
		that2, ok := that.(GameMessage_SteerMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Direction != nil && that1.Direction != nil {
		if *this.Direction != *that1.Direction {
			return false
		}
	} else if this.Direction != nil {
		return false
	} else if that1.Direction != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_AckMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_AckMsg)
	if !ok {
		that2, ok := that.(GameMessage_AckMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_AckMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_AckMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_AckMsg but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_AckMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_AckMsg)
	if !ok {
		that2, ok := that.(GameMessage_AckMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_StateMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_StateMsg)
	if !ok {
		that2, ok := that.(GameMessage_StateMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_StateMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_StateMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_StateMsg but is not nil && this == nil")
	}
	if !this.State.Equal(that1.State) {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_StateMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_StateMsg)
	if !ok {
		that2, ok := that.(GameMessage_StateMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_AnnouncementMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_AnnouncementMsg)
	if !ok {
		that2, ok := that.(GameMessage_AnnouncementMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_AnnouncementMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_AnnouncementMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_AnnouncementMsg but is not nil && this == nil")
	}
	if !this.Players.Equal(that1.Players) {
		return fmt.Errorf("Players this(%v) Not Equal that(%v)", this.Players, that1.Players)
	}
	if !this.Config.Equal(that1.Config) {
		return fmt.Errorf("Config this(%v) Not Equal that(%v)", this.Config, that1.Config)
	}
	if this.CanJoin != nil && that1.CanJoin != nil {
		if *this.CanJoin != *that1.CanJoin {
			return fmt.Errorf("CanJoin this(%v) Not Equal that(%v)", *this.CanJoin, *that1.CanJoin)
		}
	} else if this.CanJoin != nil {
		return fmt.Errorf("this.CanJoin == nil && that.CanJoin != nil")
	} else if that1.CanJoin != nil {
		return fmt.Errorf("CanJoin this(%v) Not Equal that(%v)", this.CanJoin, that1.CanJoin)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_AnnouncementMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_AnnouncementMsg)
	if !ok {
		that2, ok := that.(GameMessage_AnnouncementMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Players.Equal(that1.Players) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if this.CanJoin != nil && that1.CanJoin != nil {
		if *this.CanJoin != *that1.CanJoin {
			return false
		}
	} else if this.CanJoin != nil {
		return false
	} else if that1.CanJoin != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_JoinMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_JoinMsg)
	if !ok {
		that2, ok := that.(GameMessage_JoinMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_JoinMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_JoinMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_JoinMsg but is not nil && this == nil")
	}
	if this.PlayerType != nil && that1.PlayerType != nil {
		if *this.PlayerType != *that1.PlayerType {
			return fmt.Errorf("PlayerType this(%v) Not Equal that(%v)", *this.PlayerType, *that1.PlayerType)
		}
	} else if this.PlayerType != nil {
		return fmt.Errorf("this.PlayerType == nil && that.PlayerType != nil")
	} else if that1.PlayerType != nil {
		return fmt.Errorf("PlayerType this(%v) Not Equal that(%v)", this.PlayerType, that1.PlayerType)
	}
	if this.OnlyView != nil && that1.OnlyView != nil {
		if *this.OnlyView != *that1.OnlyView {
			return fmt.Errorf("OnlyView this(%v) Not Equal that(%v)", *this.OnlyView, *that1.OnlyView)
		}
	} else if this.OnlyView != nil {
		return fmt.Errorf("this.OnlyView == nil && that.OnlyView != nil")
	} else if that1.OnlyView != nil {
		return fmt.Errorf("OnlyView this(%v) Not Equal that(%v)", this.OnlyView, that1.OnlyView)
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return fmt.Errorf("Name this(%v) Not Equal that(%v)", *this.Name, *that1.Name)
		}
	} else if this.Name != nil {
		return fmt.Errorf("this.Name == nil && that.Name != nil")
	} else if that1.Name != nil {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_JoinMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_JoinMsg)
	if !ok {
		that2, ok := that.(GameMessage_JoinMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlayerType != nil && that1.PlayerType != nil {
		if *this.PlayerType != *that1.PlayerType {
			return false
		}
	} else if this.PlayerType != nil {
		return false
	} else if that1.PlayerType != nil {
		return false
	}
	if this.OnlyView != nil && that1.OnlyView != nil {
		if *this.OnlyView != *that1.OnlyView {
			return false
		}
	} else if this.OnlyView != nil {
		return false
	} else if that1.OnlyView != nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_ErrorMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_ErrorMsg)
	if !ok {
		that2, ok := that.(GameMessage_ErrorMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_ErrorMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_ErrorMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_ErrorMsg but is not nil && this == nil")
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", *this.ErrorMessage, *that1.ErrorMessage)
		}
	} else if this.ErrorMessage != nil {
		return fmt.Errorf("this.ErrorMessage == nil && that.ErrorMessage != nil")
	} else if that1.ErrorMessage != nil {
		return fmt.Errorf("ErrorMessage this(%v) Not Equal that(%v)", this.ErrorMessage, that1.ErrorMessage)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_ErrorMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_ErrorMsg)
	if !ok {
		that2, ok := that.(GameMessage_ErrorMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorMessage != nil && that1.ErrorMessage != nil {
		if *this.ErrorMessage != *that1.ErrorMessage {
			return false
		}
	} else if this.ErrorMessage != nil {
		return false
	} else if that1.ErrorMessage != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GameMessage_RoleChangeMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GameMessage_RoleChangeMsg)
	if !ok {
		that2, ok := that.(GameMessage_RoleChangeMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GameMessage_RoleChangeMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GameMessage_RoleChangeMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GameMessage_RoleChangeMsg but is not nil && this == nil")
	}
	if this.SenderRole != nil && that1.SenderRole != nil {
		if *this.SenderRole != *that1.SenderRole {
			return fmt.Errorf("SenderRole this(%v) Not Equal that(%v)", *this.SenderRole, *that1.SenderRole)
		}
	} else if this.SenderRole != nil {
		return fmt.Errorf("this.SenderRole == nil && that.SenderRole != nil")
	} else if that1.SenderRole != nil {
		return fmt.Errorf("SenderRole this(%v) Not Equal that(%v)", this.SenderRole, that1.SenderRole)
	}
	if this.ReceiverRole != nil && that1.ReceiverRole != nil {
		if *this.ReceiverRole != *that1.ReceiverRole {
			return fmt.Errorf("ReceiverRole this(%v) Not Equal that(%v)", *this.ReceiverRole, *that1.ReceiverRole)
		}
	} else if this.ReceiverRole != nil {
		return fmt.Errorf("this.ReceiverRole == nil && that.ReceiverRole != nil")
	} else if that1.ReceiverRole != nil {
		return fmt.Errorf("ReceiverRole this(%v) Not Equal that(%v)", this.ReceiverRole, that1.ReceiverRole)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GameMessage_RoleChangeMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameMessage_RoleChangeMsg)
	if !ok {
		that2, ok := that.(GameMessage_RoleChangeMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderRole != nil && that1.SenderRole != nil {
		if *this.SenderRole != *that1.SenderRole {
			return false
		}
	} else if this.SenderRole != nil {
		return false
	} else if that1.SenderRole != nil {
		return false
	}
	if this.ReceiverRole != nil && that1.ReceiverRole != nil {
		if *this.ReceiverRole != *that1.ReceiverRole {
			return false
		}
	} else if this.ReceiverRole != nil {
		return false
	} else if that1.ReceiverRole != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GamePlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&snakes.GamePlayer{")
	if this.Name != nil {
		s = append(s, "Name: "+valueToGoStringSnakes(this.Name, "string")+",\n")
	}
	if this.Id != nil {
		s = append(s, "Id: "+valueToGoStringSnakes(this.Id, "int32")+",\n")
	}
	if this.IpAddress != nil {
		s = append(s, "IpAddress: "+valueToGoStringSnakes(this.IpAddress, "string")+",\n")
	}
	if this.Port != nil {
		s = append(s, "Port: "+valueToGoStringSnakes(this.Port, "int32")+",\n")
	}
	if this.Role != nil {
		s = append(s, "Role: "+valueToGoStringSnakes(this.Role, "NodeRole")+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+valueToGoStringSnakes(this.Type, "PlayerType")+",\n")
	}
	if this.Score != nil {
		s = append(s, "Score: "+valueToGoStringSnakes(this.Score, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&snakes.GameConfig{")
	if this.Width != nil {
		s = append(s, "Width: "+valueToGoStringSnakes(this.Width, "int32")+",\n")
	}
	if this.Height != nil {
		s = append(s, "Height: "+valueToGoStringSnakes(this.Height, "int32")+",\n")
	}
	if this.FoodStatic != nil {
		s = append(s, "FoodStatic: "+valueToGoStringSnakes(this.FoodStatic, "int32")+",\n")
	}
	if this.FoodPerPlayer != nil {
		s = append(s, "FoodPerPlayer: "+valueToGoStringSnakes(this.FoodPerPlayer, "float32")+",\n")
	}
	if this.StateDelayMs != nil {
		s = append(s, "StateDelayMs: "+valueToGoStringSnakes(this.StateDelayMs, "int32")+",\n")
	}
	if this.DeadFoodProb != nil {
		s = append(s, "DeadFoodProb: "+valueToGoStringSnakes(this.DeadFoodProb, "float32")+",\n")
	}
	if this.PingDelayMs != nil {
		s = append(s, "PingDelayMs: "+valueToGoStringSnakes(this.PingDelayMs, "int32")+",\n")
	}
	if this.NodeTimeoutMs != nil {
		s = append(s, "NodeTimeoutMs: "+valueToGoStringSnakes(this.NodeTimeoutMs, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GamePlayers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&snakes.GamePlayers{")
	if this.Players != nil {
		s = append(s, "Players: "+fmt.Sprintf("%#v", this.Players)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&snakes.GameState{")
	if this.StateOrder != nil {
		s = append(s, "StateOrder: "+valueToGoStringSnakes(this.StateOrder, "int32")+",\n")
	}
	if this.Snakes != nil {
		s = append(s, "Snakes: "+fmt.Sprintf("%#v", this.Snakes)+",\n")
	}
	if this.Foods != nil {
		s = append(s, "Foods: "+fmt.Sprintf("%#v", this.Foods)+",\n")
	}
	if this.Players != nil {
		s = append(s, "Players: "+fmt.Sprintf("%#v", this.Players)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameState_Coord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&snakes.GameState_Coord{")
	if this.X != nil {
		s = append(s, "X: "+valueToGoStringSnakes(this.X, "int32")+",\n")
	}
	if this.Y != nil {
		s = append(s, "Y: "+valueToGoStringSnakes(this.Y, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameState_Snake) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&snakes.GameState_Snake{")
	if this.PlayerId != nil {
		s = append(s, "PlayerId: "+valueToGoStringSnakes(this.PlayerId, "int32")+",\n")
	}
	if this.Points != nil {
		s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+valueToGoStringSnakes(this.State, "GameState_Snake_SnakeState")+",\n")
	}
	if this.HeadDirection != nil {
		s = append(s, "HeadDirection: "+valueToGoStringSnakes(this.HeadDirection, "Direction")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&snakes.GameMessage{")
	if this.MsgSeq != nil {
		s = append(s, "MsgSeq: "+valueToGoStringSnakes(this.MsgSeq, "int64")+",\n")
	}
	if this.SenderId != nil {
		s = append(s, "SenderId: "+valueToGoStringSnakes(this.SenderId, "int32")+",\n")
	}
	if this.ReceiverId != nil {
		s = append(s, "ReceiverId: "+valueToGoStringSnakes(this.ReceiverId, "int32")+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_Ping{` +
		`Ping:` + fmt.Sprintf("%#v", this.Ping) + `}`}, ", ")
	return s
}
func (this *GameMessage_Steer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_Steer{` +
		`Steer:` + fmt.Sprintf("%#v", this.Steer) + `}`}, ", ")
	return s
}
func (this *GameMessage_Ack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_Ack{` +
		`Ack:` + fmt.Sprintf("%#v", this.Ack) + `}`}, ", ")
	return s
}
func (this *GameMessage_State) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_State{` +
		`State:` + fmt.Sprintf("%#v", this.State) + `}`}, ", ")
	return s
}
func (this *GameMessage_Announcement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_Announcement{` +
		`Announcement:` + fmt.Sprintf("%#v", this.Announcement) + `}`}, ", ")
	return s
}
func (this *GameMessage_Join) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_Join{` +
		`Join:` + fmt.Sprintf("%#v", this.Join) + `}`}, ", ")
	return s
}
func (this *GameMessage_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *GameMessage_RoleChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&snakes.GameMessage_RoleChange{` +
		`RoleChange:` + fmt.Sprintf("%#v", this.RoleChange) + `}`}, ", ")
	return s
}
func (this *GameMessage_PingMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&snakes.GameMessage_PingMsg{")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_SteerMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&snakes.GameMessage_SteerMsg{")
	if this.Direction != nil {
		s = append(s, "Direction: "+valueToGoStringSnakes(this.Direction, "Direction")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_AckMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&snakes.GameMessage_AckMsg{")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_StateMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&snakes.GameMessage_StateMsg{")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_AnnouncementMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&snakes.GameMessage_AnnouncementMsg{")
	if this.Players != nil {
		s = append(s, "Players: "+fmt.Sprintf("%#v", this.Players)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.CanJoin != nil {
		s = append(s, "CanJoin: "+valueToGoStringSnakes(this.CanJoin, "bool")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_JoinMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&snakes.GameMessage_JoinMsg{")
	if this.PlayerType != nil {
		s = append(s, "PlayerType: "+valueToGoStringSnakes(this.PlayerType, "PlayerType")+",\n")
	}
	if this.OnlyView != nil {
		s = append(s, "OnlyView: "+valueToGoStringSnakes(this.OnlyView, "bool")+",\n")
	}
	if this.Name != nil {
		s = append(s, "Name: "+valueToGoStringSnakes(this.Name, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_ErrorMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&snakes.GameMessage_ErrorMsg{")
	if this.ErrorMessage != nil {
		s = append(s, "ErrorMessage: "+valueToGoStringSnakes(this.ErrorMessage, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameMessage_RoleChangeMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&snakes.GameMessage_RoleChangeMsg{")
	if this.SenderRole != nil {
		s = append(s, "SenderRole: "+valueToGoStringSnakes(this.SenderRole, "NodeRole")+",\n")
	}
	if this.ReceiverRole != nil {
		s = append(s, "ReceiverRole: "+valueToGoStringSnakes(this.ReceiverRole, "NodeRole")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSnakes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GamePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GamePlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("score")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Score))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Role == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("role")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Role))
		i--
		dAtA[i] = 0x28
	}
	if m.Port == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("port")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.IpAddress == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ip_address")
	} else {
		i -= len(*m.IpAddress)
		copy(dAtA[i:], *m.IpAddress)
		i = encodeVarintSnakes(dAtA, i, uint64(len(*m.IpAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintSnakes(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeTimeoutMs != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.NodeTimeoutMs))
		i--
		dAtA[i] = 0x40
	}
	if m.PingDelayMs != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.PingDelayMs))
		i--
		dAtA[i] = 0x38
	}
	if m.DeadFoodProb != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.DeadFoodProb))))
		i--
		dAtA[i] = 0x35
	}
	if m.StateDelayMs != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.StateDelayMs))
		i--
		dAtA[i] = 0x28
	}
	if m.FoodPerPlayer != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.FoodPerPlayer))))
		i--
		dAtA[i] = 0x25
	}
	if m.FoodStatic != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.FoodStatic))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GamePlayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GamePlayers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnakes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("config")
	} else {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Players == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("players")
	} else {
		{
			size, err := m.Players.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Foods) > 0 {
		for iNdEx := len(m.Foods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Foods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnakes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Snakes) > 0 {
		for iNdEx := len(m.Snakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Snakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnakes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StateOrder == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("state_order")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.StateOrder))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameState_Coord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameState_Coord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameState_Coord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Y != nil {
		i = encodeVarintSnakes(dAtA, i, uint64((uint32(*m.Y)<<1)^uint32((*m.Y>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.X != nil {
		i = encodeVarintSnakes(dAtA, i, uint64((uint32(*m.X)<<1)^uint32((*m.X>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameState_Snake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameState_Snake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameState_Snake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HeadDirection == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("head_direction")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.HeadDirection))
		i--
		dAtA[i] = 0x20
	}
	if m.State == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("utils")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnakes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PlayerId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("player_id")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.PlayerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReceiverId != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.ReceiverId))
		i--
		dAtA[i] = 0x58
	}
	if m.SenderId != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.SenderId))
		i--
		dAtA[i] = 0x50
	}
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MsgSeq == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg_seq")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.MsgSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ping != nil {
		{
			size, err := m.Ping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_Steer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_Steer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Steer != nil {
		{
			size, err := m.Steer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_Announcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_Announcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Announcement != nil {
		{
			size, err := m.Announcement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_Join) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_Join) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Join != nil {
		{
			size, err := m.Join.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_RoleChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_RoleChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoleChange != nil {
		{
			size, err := m.RoleChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GameMessage_PingMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_PingMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_PingMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_SteerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_SteerMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_SteerMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Direction == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("direction")
	} else {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.Direction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_AckMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_AckMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_AckMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_StateMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_StateMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_StateMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("utils")
	} else {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_AnnouncementMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_AnnouncementMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_AnnouncementMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CanJoin != nil {
		i--
		if *m.CanJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Config == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("config")
	} else {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Players == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("players")
	} else {
		{
			size, err := m.Players.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnakes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_JoinMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_JoinMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_JoinMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintSnakes(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OnlyView != nil {
		i--
		if *m.OnlyView {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PlayerType != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.PlayerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_ErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_ErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_ErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorMessage == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("error_message")
	} else {
		i -= len(*m.ErrorMessage)
		copy(dAtA[i:], *m.ErrorMessage)
		i = encodeVarintSnakes(dAtA, i, uint64(len(*m.ErrorMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameMessage_RoleChangeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage_RoleChangeMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMessage_RoleChangeMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReceiverRole != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.ReceiverRole))
		i--
		dAtA[i] = 0x10
	}
	if m.SenderRole != nil {
		i = encodeVarintSnakes(dAtA, i, uint64(*m.SenderRole))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnakes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnakes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGamePlayer(r randySnakes, easy bool) *GamePlayer {
	this := &GamePlayer{}
	v1 := string(randStringSnakes(r))
	this.Name = &v1
	v2 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v2 *= -1
	}
	this.Id = &v2
	v3 := string(randStringSnakes(r))
	this.IpAddress = &v3
	v4 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v4 *= -1
	}
	this.Port = &v4
	v5 := NodeRole([]int32{0, 1, 2, 3}[r.Intn(4)])
	this.Role = &v5
	if r.Intn(5) != 0 {
		v6 := PlayerType([]int32{0, 1}[r.Intn(2)])
		this.Type = &v6
	}
	v7 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v7 *= -1
	}
	this.Score = &v7
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 8)
	}
	return this
}

func NewPopulatedGameConfig(r randySnakes, easy bool) *GameConfig {
	this := &GameConfig{}
	if r.Intn(5) != 0 {
		v8 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.Width = &v8
	}
	if r.Intn(5) != 0 {
		v9 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.Height = &v9
	}
	if r.Intn(5) != 0 {
		v10 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.FoodStatic = &v10
	}
	if r.Intn(5) != 0 {
		v11 := float32(r.Float32())
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		this.FoodPerPlayer = &v11
	}
	if r.Intn(5) != 0 {
		v12 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		this.StateDelayMs = &v12
	}
	if r.Intn(5) != 0 {
		v13 := float32(r.Float32())
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		this.DeadFoodProb = &v13
	}
	if r.Intn(5) != 0 {
		v14 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		this.PingDelayMs = &v14
	}
	if r.Intn(5) != 0 {
		v15 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.NodeTimeoutMs = &v15
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 9)
	}
	return this
}

func NewPopulatedGamePlayers(r randySnakes, easy bool) *GamePlayers {
	this := &GamePlayers{}
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.Players = make([]*GamePlayer, v16)
		for i := 0; i < v16; i++ {
			this.Players[i] = NewPopulatedGamePlayer(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 2)
	}
	return this
}

func NewPopulatedGameState(r randySnakes, easy bool) *GameState {
	this := &GameState{}
	v17 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v17 *= -1
	}
	this.StateOrder = &v17
	if r.Intn(5) != 0 {
		v18 := r.Intn(5)
		this.Snakes = make([]*GameState_Snake, v18)
		for i := 0; i < v18; i++ {
			this.Snakes[i] = NewPopulatedGameState_Snake(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v19 := r.Intn(5)
		this.Foods = make([]*GameState_Coord, v19)
		for i := 0; i < v19; i++ {
			this.Foods[i] = NewPopulatedGameState_Coord(r, easy)
		}
	}
	this.Players = NewPopulatedGamePlayers(r, easy)
	this.Config = NewPopulatedGameConfig(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 6)
	}
	return this
}

func NewPopulatedGameState_Coord(r randySnakes, easy bool) *GameState_Coord {
	this := &GameState_Coord{}

	v20 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v20 *= -1
	}
	this.X = &v20

	v21 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v21 *= -1
	}
	this.Y = &v21

	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 3)
	}
	return this
}

func NewPopulatedGameState_Snake(r randySnakes, easy bool) *GameState_Snake {
	this := &GameState_Snake{}
	v22 := int32(r.Int31())
	if r.Intn(2) == 0 {
		v22 *= -1
	}
	this.PlayerId = &v22
	if r.Intn(5) != 0 {
		v23 := r.Intn(5)
		this.Points = make([]*GameState_Coord, v23)
		for i := 0; i < v23; i++ {
			this.Points[i] = NewPopulatedGameState_Coord(r, easy)
		}
	}
	v24 := GameState_Snake_SnakeState([]int32{0, 1}[r.Intn(2)])
	this.State = &v24
	v25 := Direction([]int32{1, 2, 3, 4}[r.Intn(4)])
	this.HeadDirection = &v25
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 5)
	}
	return this
}

func NewPopulatedGameMessage(r randySnakes, easy bool) *GameMessage {
	this := &GameMessage{}
	v26 := int64(r.Int63())
	if r.Intn(2) == 0 {
		v26 *= -1
	}
	this.MsgSeq = &v26
	oneofNumber_Type := []int32{2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(8)]
	switch oneofNumber_Type {
	case 2:
		this.Type = NewPopulatedGameMessage_Ping(r, easy)
	case 3:
		this.Type = NewPopulatedGameMessage_Steer(r, easy)
	case 4:
		this.Type = NewPopulatedGameMessage_Ack(r, easy)
	case 5:
		this.Type = NewPopulatedGameMessage_State(r, easy)
	case 6:
		this.Type = NewPopulatedGameMessage_Announcement(r, easy)
	case 7:
		this.Type = NewPopulatedGameMessage_Join(r, easy)
	case 8:
		this.Type = NewPopulatedGameMessage_Error(r, easy)
	case 9:
		this.Type = NewPopulatedGameMessage_RoleChange(r, easy)
	}
	if r.Intn(5) != 0 {
		v27 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v27 *= -1
		}
		this.SenderId = &v27
	}
	if r.Intn(5) != 0 {
		v28 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v28 *= -1
		}
		this.ReceiverId = &v28
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 12)
	}
	return this
}

func NewPopulatedGameMessage_Ping(r randySnakes, easy bool) *GameMessage_Ping {
	this := &GameMessage_Ping{}
	this.Ping = NewPopulatedGameMessage_PingMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_Steer(r randySnakes, easy bool) *GameMessage_Steer {
	this := &GameMessage_Steer{}
	this.Steer = NewPopulatedGameMessage_SteerMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_Ack(r randySnakes, easy bool) *GameMessage_Ack {
	this := &GameMessage_Ack{}
	this.Ack = NewPopulatedGameMessage_AckMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_State(r randySnakes, easy bool) *GameMessage_State {
	this := &GameMessage_State{}
	this.State = NewPopulatedGameMessage_StateMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_Announcement(r randySnakes, easy bool) *GameMessage_Announcement {
	this := &GameMessage_Announcement{}
	this.Announcement = NewPopulatedGameMessage_AnnouncementMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_Join(r randySnakes, easy bool) *GameMessage_Join {
	this := &GameMessage_Join{}
	this.Join = NewPopulatedGameMessage_JoinMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_Error(r randySnakes, easy bool) *GameMessage_Error {
	this := &GameMessage_Error{}
	this.Error = NewPopulatedGameMessage_ErrorMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_RoleChange(r randySnakes, easy bool) *GameMessage_RoleChange {
	this := &GameMessage_RoleChange{}
	this.RoleChange = NewPopulatedGameMessage_RoleChangeMsg(r, easy)
	return this
}
func NewPopulatedGameMessage_PingMsg(r randySnakes, easy bool) *GameMessage_PingMsg {
	this := &GameMessage_PingMsg{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 1)
	}
	return this
}

func NewPopulatedGameMessage_SteerMsg(r randySnakes, easy bool) *GameMessage_SteerMsg {
	this := &GameMessage_SteerMsg{}
	v29 := Direction([]int32{1, 2, 3, 4}[r.Intn(4)])
	this.Direction = &v29
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 2)
	}
	return this
}

func NewPopulatedGameMessage_AckMsg(r randySnakes, easy bool) *GameMessage_AckMsg {
	this := &GameMessage_AckMsg{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 1)
	}
	return this
}

func NewPopulatedGameMessage_StateMsg(r randySnakes, easy bool) *GameMessage_StateMsg {
	this := &GameMessage_StateMsg{}
	this.State = NewPopulatedGameState(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 2)
	}
	return this
}

func NewPopulatedGameMessage_AnnouncementMsg(r randySnakes, easy bool) *GameMessage_AnnouncementMsg {
	this := &GameMessage_AnnouncementMsg{}
	this.Players = NewPopulatedGamePlayers(r, easy)
	this.Config = NewPopulatedGameConfig(r, easy)

	v30 := bool(bool(r.Intn(2) == 0))
	this.CanJoin = &v30

	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 4)
	}
	return this
}

func NewPopulatedGameMessage_JoinMsg(r randySnakes, easy bool) *GameMessage_JoinMsg {
	this := &GameMessage_JoinMsg{}
	if r.Intn(5) != 0 {
		v31 := PlayerType([]int32{0, 1}[r.Intn(2)])
		this.PlayerType = &v31
	}
	if r.Intn(5) != 0 {
		v32 := bool(bool(r.Intn(2) == 0))
		this.OnlyView = &v32
	}
	v33 := string(randStringSnakes(r))
	this.Name = &v33
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 4)
	}
	return this
}

func NewPopulatedGameMessage_ErrorMsg(r randySnakes, easy bool) *GameMessage_ErrorMsg {
	this := &GameMessage_ErrorMsg{}
	v34 := string(randStringSnakes(r))
	this.ErrorMessage = &v34
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 2)
	}
	return this
}

func NewPopulatedGameMessage_RoleChangeMsg(r randySnakes, easy bool) *GameMessage_RoleChangeMsg {
	this := &GameMessage_RoleChangeMsg{}
	if r.Intn(5) != 0 {
		v35 := NodeRole([]int32{0, 1, 2, 3}[r.Intn(4)])
		this.SenderRole = &v35
	}
	if r.Intn(5) != 0 {
		v36 := NodeRole([]int32{0, 1, 2, 3}[r.Intn(4)])
		this.ReceiverRole = &v36
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnakes(r, 3)
	}
	return this
}

type randySnakes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSnakes(r randySnakes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSnakes(r randySnakes) string {
	v37 := r.Intn(100)
	tmps := make([]rune, v37)
	for i := 0; i < v37; i++ {
		tmps[i] = randUTF8RuneSnakes(r)
	}
	return string(tmps)
}
func randUnrecognizedSnakes(r randySnakes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSnakes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSnakes(dAtA []byte, r randySnakes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSnakes(dAtA, uint64(key))
		v38 := r.Int63()
		if r.Intn(2) == 0 {
			v38 *= -1
		}
		dAtA = encodeVarintPopulateSnakes(dAtA, uint64(v38))
	case 1:
		dAtA = encodeVarintPopulateSnakes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSnakes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSnakes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSnakes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSnakes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GamePlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovSnakes(uint64(*m.Id))
	}
	if m.IpAddress != nil {
		l = len(*m.IpAddress)
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.Port != nil {
		n += 1 + sovSnakes(uint64(*m.Port))
	}
	if m.Role != nil {
		n += 1 + sovSnakes(uint64(*m.Role))
	}
	if m.Type != nil {
		n += 1 + sovSnakes(uint64(*m.Type))
	}
	if m.Score != nil {
		n += 1 + sovSnakes(uint64(*m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != nil {
		n += 1 + sovSnakes(uint64(*m.Width))
	}
	if m.Height != nil {
		n += 1 + sovSnakes(uint64(*m.Height))
	}
	if m.FoodStatic != nil {
		n += 1 + sovSnakes(uint64(*m.FoodStatic))
	}
	if m.FoodPerPlayer != nil {
		n += 5
	}
	if m.StateDelayMs != nil {
		n += 1 + sovSnakes(uint64(*m.StateDelayMs))
	}
	if m.DeadFoodProb != nil {
		n += 5
	}
	if m.PingDelayMs != nil {
		n += 1 + sovSnakes(uint64(*m.PingDelayMs))
	}
	if m.NodeTimeoutMs != nil {
		n += 1 + sovSnakes(uint64(*m.NodeTimeoutMs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GamePlayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovSnakes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateOrder != nil {
		n += 1 + sovSnakes(uint64(*m.StateOrder))
	}
	if len(m.Snakes) > 0 {
		for _, e := range m.Snakes {
			l = e.Size()
			n += 1 + l + sovSnakes(uint64(l))
		}
	}
	if len(m.Foods) > 0 {
		for _, e := range m.Foods {
			l = e.Size()
			n += 1 + l + sovSnakes(uint64(l))
		}
	}
	if m.Players != nil {
		l = m.Players.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameState_Coord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != nil {
		n += 1 + sozSnakes(uint64(*m.X))
	}
	if m.Y != nil {
		n += 1 + sozSnakes(uint64(*m.Y))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameState_Snake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovSnakes(uint64(*m.PlayerId))
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovSnakes(uint64(l))
		}
	}
	if m.State != nil {
		n += 1 + sovSnakes(uint64(*m.State))
	}
	if m.HeadDirection != nil {
		n += 1 + sovSnakes(uint64(*m.HeadDirection))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgSeq != nil {
		n += 1 + sovSnakes(uint64(*m.MsgSeq))
	}
	if m.Type != nil {
		n += m.Type.Size()
	}
	if m.SenderId != nil {
		n += 1 + sovSnakes(uint64(*m.SenderId))
	}
	if m.ReceiverId != nil {
		n += 1 + sovSnakes(uint64(*m.ReceiverId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_Steer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Steer != nil {
		l = m.Steer.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_Announcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Announcement != nil {
		l = m.Announcement.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_Join) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Join != nil {
		l = m.Join.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_RoleChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleChange != nil {
		l = m.RoleChange.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	return n
}
func (m *GameMessage_PingMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_SteerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Direction != nil {
		n += 1 + sovSnakes(uint64(*m.Direction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_AckMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_StateMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_AnnouncementMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Players != nil {
		l = m.Players.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.CanJoin != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_JoinMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerType != nil {
		n += 1 + sovSnakes(uint64(*m.PlayerType))
	}
	if m.OnlyView != nil {
		n += 2
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_ErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorMessage != nil {
		l = len(*m.ErrorMessage)
		n += 1 + l + sovSnakes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMessage_RoleChangeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderRole != nil {
		n += 1 + sovSnakes(uint64(*m.SenderRole))
	}
	if m.ReceiverRole != nil {
		n += 1 + sovSnakes(uint64(*m.ReceiverRole))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSnakes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnakes(x uint64) (n int) {
	return sovSnakes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GamePlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GamePlayer{`,
		`Name: ` + valueToStringSnakes(this.Name) + `,`,
		`Id: ` + valueToStringSnakes(this.Id) + `,`,
		`IpAddress: ` + valueToStringSnakes(this.IpAddress) + `,`,
		`Port: ` + valueToStringSnakes(this.Port) + `,`,
		`Role: ` + valueToStringSnakes(this.Role) + `,`,
		`Type: ` + valueToStringSnakes(this.Type) + `,`,
		`Score: ` + valueToStringSnakes(this.Score) + `,`,
		`XXX_unrecognized: ` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{
		`Width:` + valueToStringSnakes(this.Width) + `,`,
		`Height:` + valueToStringSnakes(this.Height) + `,`,
		`Food static:` + valueToStringSnakes(this.FoodStatic) + `,`,
		`Food per player:` + valueToStringSnakes(this.FoodPerPlayer) + `,`,
		`State delay ms:` + valueToStringSnakes(this.StateDelayMs) + `,`,
		`Dead food prob:` + valueToStringSnakes(this.DeadFoodProb) + `,`,
		`Ping delay ms:` + valueToStringSnakes(this.PingDelayMs) + `,`,
		`Node timeout ms:` + valueToStringSnakes(this.NodeTimeoutMs) + `,`}, "")
	return s
}
func (this *GamePlayers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPlayers := "[]*GamePlayer{"
	for _, f := range this.Players {
		repeatedStringForPlayers += strings.Replace(f.String(), "GamePlayer", "GamePlayer", 1) + ","
	}
	repeatedStringForPlayers += "}"
	s := strings.Join([]string{`&GamePlayers{`,
		`Players:` + repeatedStringForPlayers + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameState) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSnakes := "[]*GameState_Snake{"
	for _, f := range this.Snakes {
		repeatedStringForSnakes += strings.Replace(fmt.Sprintf("%v", f), "GameState_Snake", "GameState_Snake", 1) + ","
	}
	repeatedStringForSnakes += "}"
	repeatedStringForFoods := "[]*GameState_Coord{"
	for _, f := range this.Foods {
		repeatedStringForFoods += strings.Replace(fmt.Sprintf("%v", f), "GameState_Coord", "GameState_Coord", 1) + ","
	}
	repeatedStringForFoods += "}"
	s := strings.Join([]string{`&GameState{`,
		`StateOrder:` + valueToStringSnakes(this.StateOrder) + `,`,
		`Snakes:` + repeatedStringForSnakes + `,`,
		`Foods:` + repeatedStringForFoods + `,`,
		`Players:` + strings.Replace(this.Players.String(), "GamePlayers", "GamePlayers", 1) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "GameConfig", "GameConfig", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameState_Coord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameState_Coord{`,
		`X:` + valueToStringSnakes(this.X) + `,`,
		`Y:` + valueToStringSnakes(this.Y) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameState_Snake) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPoints := "[]*GameState_Coord{"
	for _, f := range this.Points {
		repeatedStringForPoints += strings.Replace(fmt.Sprintf("%v", f), "GameState_Coord", "GameState_Coord", 1) + ","
	}
	repeatedStringForPoints += "}"
	s := strings.Join([]string{`&GameState_Snake{`,
		`PlayerId:` + valueToStringSnakes(this.PlayerId) + `,`,
		`Points:` + repeatedStringForPoints + `,`,
		`State:` + valueToStringSnakes(this.State) + `,`,
		`HeadDirection:` + valueToStringSnakes(this.HeadDirection) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage{`,
		`MsgSeq:` + valueToStringSnakes(this.MsgSeq) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SenderId:` + valueToStringSnakes(this.SenderId) + `,`,
		`ReceiverId:` + valueToStringSnakes(this.ReceiverId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_Ping{`,
		`Ping:` + strings.Replace(fmt.Sprintf("%v", this.Ping), "GameMessage_PingMsg", "GameMessage_PingMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_Steer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_Steer{`,
		`Steer:` + strings.Replace(fmt.Sprintf("%v", this.Steer), "GameMessage_SteerMsg", "GameMessage_SteerMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_Ack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_Ack{`,
		`Ack:` + strings.Replace(fmt.Sprintf("%v", this.Ack), "GameMessage_AckMsg", "GameMessage_AckMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_State) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_State{`,
		`State:` + strings.Replace(fmt.Sprintf("%v", this.State), "GameMessage_StateMsg", "GameMessage_StateMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_Announcement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_Announcement{`,
		`Announcement:` + strings.Replace(fmt.Sprintf("%v", this.Announcement), "GameMessage_AnnouncementMsg", "GameMessage_AnnouncementMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_Join) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_Join{`,
		`Join:` + strings.Replace(fmt.Sprintf("%v", this.Join), "GameMessage_JoinMsg", "GameMessage_JoinMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_Error{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "GameMessage_ErrorMsg", "GameMessage_ErrorMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_RoleChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_RoleChange{`,
		`RoleChange:` + strings.Replace(fmt.Sprintf("%v", this.RoleChange), "GameMessage_RoleChangeMsg", "GameMessage_RoleChangeMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_PingMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_PingMsg{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_SteerMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_SteerMsg{`,
		`Direction:` + valueToStringSnakes(this.Direction) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_AckMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_AckMsg{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_StateMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_StateMsg{`,
		`State:` + strings.Replace(this.State.String(), "GameState", "GameState", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_AnnouncementMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_AnnouncementMsg{`,
		`Players:` + strings.Replace(this.Players.String(), "GamePlayers", "GamePlayers", 1) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "GameConfig", "GameConfig", 1) + `,`,
		`CanJoin:` + valueToStringSnakes(this.CanJoin) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_JoinMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_JoinMsg{`,
		`PlayerType:` + valueToStringSnakes(this.PlayerType) + `,`,
		`OnlyView:` + valueToStringSnakes(this.OnlyView) + `,`,
		`Name:` + valueToStringSnakes(this.Name) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_ErrorMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_ErrorMsg{`,
		`ErrorMessage:` + valueToStringSnakes(this.ErrorMessage) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameMessage_RoleChangeMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameMessage_RoleChangeMsg{`,
		`SenderRole:` + valueToStringSnakes(this.SenderRole) + `,`,
		`ReceiverRole:` + valueToStringSnakes(this.ReceiverRole) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSnakes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf(" %v", pv)
}
func (m *GamePlayer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IpAddress = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var v NodeRole
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= NodeRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Role = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v PlayerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PlayerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ip_address")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("port")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("role")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("score")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Height = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodStatic", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FoodStatic = &v
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodPerPlayer", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.FoodPerPlayer = &v2
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateDelayMs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StateDelayMs = &v
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadFoodProb", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.DeadFoodProb = &v2
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingDelayMs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PingDelayMs = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTimeoutMs", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NodeTimeoutMs = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &GamePlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameState) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateOrder", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StateOrder = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snakes = append(m.Snakes, &GameState_Snake{})
			if err := m.Snakes[len(m.Snakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Foods = append(m.Foods, &GameState_Coord{})
			if err := m.Foods[len(m.Foods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = &GamePlayers{}
			}
			if err := m.Players.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &GameConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("state_order")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("players")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("config")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameState_Coord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.X = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Y = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameState_Snake) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &GameState_Coord{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v GameState_Snake_SnakeState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= GameState_Snake_SnakeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadDirection", wireType)
			}
			var v Direction
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeadDirection = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("player_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("utils")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("head_direction")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgSeq = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_PingMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_Ping{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_SteerMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_Steer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_AckMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_Ack{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_StateMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_State{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Announcement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_AnnouncementMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_Announcement{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_JoinMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_Join{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_ErrorMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_Error{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameMessage_RoleChangeMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &GameMessage_RoleChange{v}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiverId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg_seq")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_PingMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_SteerMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v Direction
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Direction = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("direction")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_AckMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_StateMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GameState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("utils")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_AnnouncementMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnnouncementMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnnouncementMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = &GamePlayers{}
			}
			if err := m.Players.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &GameConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CanJoin = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("players")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("config")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_JoinMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerType", wireType)
			}
			var v PlayerType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PlayerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.OnlyView = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_ErrorMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnakes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnakes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMessage = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("error_message")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage_RoleChangeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleChangeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleChangeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderRole", wireType)
			}
			var v NodeRole
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= NodeRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderRole = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverRole", wireType)
			}
			var v NodeRole
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= NodeRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiverRole = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSnakes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnakes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnakes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnakes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnakes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnakes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnakes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnakes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnakes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnakes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnakes = fmt.Errorf("proto: unexpected end of group")
)
